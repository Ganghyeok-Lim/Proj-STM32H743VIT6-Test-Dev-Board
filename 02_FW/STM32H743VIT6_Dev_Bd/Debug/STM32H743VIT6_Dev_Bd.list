
STM32H743VIT6_Dev_Bd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002848  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002ae0  08002ae0  00012ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002af0  08002af0  00012af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002af4  08002af4  00012af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000030  24000000  08002af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  24000030  08002b28  00020030  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400009c  08002b28  0002009c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c9d1  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001a59  00000000  00000000  0002ca72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bd0  00000000  00000000  0002e4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000919  00000000  00000000  0002f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035beb  00000000  00000000  0002f9b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000dd9d  00000000  00000000  000655a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a021  00000000  00000000  00073341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003100  00000000  00000000  001cd364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000b9  00000000  00000000  001d0464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000030 	.word	0x24000030
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002ac8 	.word	0x08002ac8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000034 	.word	0x24000034
 80002d4:	08002ac8 	.word	0x08002ac8

080002d8 <Initialize_LCD>:


#include "LCD_Driver.h"

void Initialize_LCD(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
    // 1. Wait for 100us
    HAL_Delay(100);
 80002dc:	2064      	movs	r0, #100	; 0x64
 80002de:	f000 fd3f 	bl	8000d60 <HAL_Delay>

    // 2. Set GPIO Pin Output of LCD to LOW
    HAL_GPIO_WritePin(MCU_CHAR_LCD_RW_GPIO_Port, MCU_CHAR_LCD_RW_Pin, LOW);		// Write mode
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002e8:	4823      	ldr	r0, [pc, #140]	; (8000378 <Initialize_LCD+0xa0>)
 80002ea:	f001 f829 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_E_GPIO_Port, MCU_CHAR_LCD_E_Pin, LOW);
 80002ee:	2200      	movs	r2, #0
 80002f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f4:	4820      	ldr	r0, [pc, #128]	; (8000378 <Initialize_LCD+0xa0>)
 80002f6:	f001 f823 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_RS_GPIO_Port, MCU_CHAR_LCD_RS_Pin, LOW);
 80002fa:	2200      	movs	r2, #0
 80002fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000300:	481d      	ldr	r0, [pc, #116]	; (8000378 <Initialize_LCD+0xa0>)
 8000302:	f001 f81d 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA0_GPIO_Port, MCU_CHAR_LCD_DATA0_Pin, LOW);
 8000306:	2200      	movs	r2, #0
 8000308:	2101      	movs	r1, #1
 800030a:	481b      	ldr	r0, [pc, #108]	; (8000378 <Initialize_LCD+0xa0>)
 800030c:	f001 f818 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA1_GPIO_Port, MCU_CHAR_LCD_DATA1_Pin, LOW);
 8000310:	2200      	movs	r2, #0
 8000312:	2102      	movs	r1, #2
 8000314:	4818      	ldr	r0, [pc, #96]	; (8000378 <Initialize_LCD+0xa0>)
 8000316:	f001 f813 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA2_GPIO_Port, MCU_CHAR_LCD_DATA2_Pin, LOW);
 800031a:	2200      	movs	r2, #0
 800031c:	2104      	movs	r1, #4
 800031e:	4816      	ldr	r0, [pc, #88]	; (8000378 <Initialize_LCD+0xa0>)
 8000320:	f001 f80e 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA3_GPIO_Port, MCU_CHAR_LCD_DATA3_Pin, LOW);
 8000324:	2200      	movs	r2, #0
 8000326:	2108      	movs	r1, #8
 8000328:	4813      	ldr	r0, [pc, #76]	; (8000378 <Initialize_LCD+0xa0>)
 800032a:	f001 f809 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA4_GPIO_Port, MCU_CHAR_LCD_DATA4_Pin, LOW);
 800032e:	2200      	movs	r2, #0
 8000330:	2110      	movs	r1, #16
 8000332:	4811      	ldr	r0, [pc, #68]	; (8000378 <Initialize_LCD+0xa0>)
 8000334:	f001 f804 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA5_GPIO_Port, MCU_CHAR_LCD_DATA5_Pin, LOW);
 8000338:	2200      	movs	r2, #0
 800033a:	2120      	movs	r1, #32
 800033c:	480e      	ldr	r0, [pc, #56]	; (8000378 <Initialize_LCD+0xa0>)
 800033e:	f000 ffff 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA6_GPIO_Port, MCU_CHAR_LCD_DATA6_Pin, LOW);
 8000342:	2200      	movs	r2, #0
 8000344:	2140      	movs	r1, #64	; 0x40
 8000346:	480c      	ldr	r0, [pc, #48]	; (8000378 <Initialize_LCD+0xa0>)
 8000348:	f000 fffa 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA7_GPIO_Port, MCU_CHAR_LCD_DATA7_Pin, LOW);
 800034c:	2200      	movs	r2, #0
 800034e:	2180      	movs	r1, #128	; 0x80
 8000350:	4809      	ldr	r0, [pc, #36]	; (8000378 <Initialize_LCD+0xa0>)
 8000352:	f000 fff5 	bl	8001340 <HAL_GPIO_WritePin>

    // 3. Function Set (8bit, 2 Line, 5x7 dot)
    LCD_Command(0x38);
 8000356:	2038      	movs	r0, #56	; 0x38
 8000358:	f000 f810 	bl	800037c <LCD_Command>

    // 4. Display Control (Display ON, Cursor OFF)
    LCD_Command(0x0C);
 800035c:	200c      	movs	r0, #12
 800035e:	f000 f80d 	bl	800037c <LCD_Command>

    // 5. Entry Mode Set (Increment, Not Shift)
    LCD_Command(0x06);
 8000362:	2006      	movs	r0, #6
 8000364:	f000 f80a 	bl	800037c <LCD_Command>

    // 6. Clear Display
    LCD_Command(0x01);
 8000368:	2001      	movs	r0, #1
 800036a:	f000 f807 	bl	800037c <LCD_Command>
    HAL_Delay(2);
 800036e:	2002      	movs	r0, #2
 8000370:	f000 fcf6 	bl	8000d60 <HAL_Delay>
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	58020c00 	.word	0x58020c00

0800037c <LCD_Command>:

void LCD_Command(uint8_t command)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
    // 1. E = 0, RS = 0
    HAL_GPIO_WritePin(MCU_CHAR_LCD_E_GPIO_Port, MCU_CHAR_LCD_E_Pin, LOW);
 8000386:	2200      	movs	r2, #0
 8000388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800038c:	483b      	ldr	r0, [pc, #236]	; (800047c <LCD_Command+0x100>)
 800038e:	f000 ffd7 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_RS_GPIO_Port, MCU_CHAR_LCD_RS_Pin, LOW);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000398:	4838      	ldr	r0, [pc, #224]	; (800047c <LCD_Command+0x100>)
 800039a:	f000 ffd1 	bl	8001340 <HAL_GPIO_WritePin>
    Delay_us(1);
 800039e:	2001      	movs	r0, #1
 80003a0:	f000 fae2 	bl	8000968 <Delay_us>

    // 2. Write Command
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA0_GPIO_Port, MCU_CHAR_LCD_DATA0_Pin, (command & 0x01));
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	2101      	movs	r1, #1
 80003b0:	4832      	ldr	r0, [pc, #200]	; (800047c <LCD_Command+0x100>)
 80003b2:	f000 ffc5 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA1_GPIO_Port, MCU_CHAR_LCD_DATA1_Pin, ((command >> 1) & 0x01));
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	085b      	lsrs	r3, r3, #1
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	461a      	mov	r2, r3
 80003c4:	2102      	movs	r1, #2
 80003c6:	482d      	ldr	r0, [pc, #180]	; (800047c <LCD_Command+0x100>)
 80003c8:	f000 ffba 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA2_GPIO_Port, MCU_CHAR_LCD_DATA2_Pin, ((command >> 2) & 0x01));
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	089b      	lsrs	r3, r3, #2
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	461a      	mov	r2, r3
 80003da:	2104      	movs	r1, #4
 80003dc:	4827      	ldr	r0, [pc, #156]	; (800047c <LCD_Command+0x100>)
 80003de:	f000 ffaf 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA3_GPIO_Port, MCU_CHAR_LCD_DATA3_Pin, ((command >> 3) & 0x01));
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	08db      	lsrs	r3, r3, #3
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	461a      	mov	r2, r3
 80003f0:	2108      	movs	r1, #8
 80003f2:	4822      	ldr	r0, [pc, #136]	; (800047c <LCD_Command+0x100>)
 80003f4:	f000 ffa4 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA4_GPIO_Port, MCU_CHAR_LCD_DATA4_Pin, ((command >> 4) & 0x01));
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	091b      	lsrs	r3, r3, #4
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	b2db      	uxtb	r3, r3
 8000404:	461a      	mov	r2, r3
 8000406:	2110      	movs	r1, #16
 8000408:	481c      	ldr	r0, [pc, #112]	; (800047c <LCD_Command+0x100>)
 800040a:	f000 ff99 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA5_GPIO_Port, MCU_CHAR_LCD_DATA5_Pin, ((command >> 5) & 0x01));
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	095b      	lsrs	r3, r3, #5
 8000412:	b2db      	uxtb	r3, r3
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	b2db      	uxtb	r3, r3
 800041a:	461a      	mov	r2, r3
 800041c:	2120      	movs	r1, #32
 800041e:	4817      	ldr	r0, [pc, #92]	; (800047c <LCD_Command+0x100>)
 8000420:	f000 ff8e 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA6_GPIO_Port, MCU_CHAR_LCD_DATA6_Pin, ((command >> 6) & 0x01));
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	099b      	lsrs	r3, r3, #6
 8000428:	b2db      	uxtb	r3, r3
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	b2db      	uxtb	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	2140      	movs	r1, #64	; 0x40
 8000434:	4811      	ldr	r0, [pc, #68]	; (800047c <LCD_Command+0x100>)
 8000436:	f000 ff83 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA7_GPIO_Port, MCU_CHAR_LCD_DATA7_Pin, ((command >> 7) & 0x01));
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	09db      	lsrs	r3, r3, #7
 800043e:	b2db      	uxtb	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	2180      	movs	r1, #128	; 0x80
 8000444:	480d      	ldr	r0, [pc, #52]	; (800047c <LCD_Command+0x100>)
 8000446:	f000 ff7b 	bl	8001340 <HAL_GPIO_WritePin>
    Delay_us(1);
 800044a:	2001      	movs	r0, #1
 800044c:	f000 fa8c 	bl	8000968 <Delay_us>

    // 3. E = 1
    HAL_GPIO_WritePin(MCU_CHAR_LCD_E_GPIO_Port, MCU_CHAR_LCD_E_Pin, HIGH);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000456:	4809      	ldr	r0, [pc, #36]	; (800047c <LCD_Command+0x100>)
 8000458:	f000 ff72 	bl	8001340 <HAL_GPIO_WritePin>

    // 4. Wait for 1us
    Delay_us(1);
 800045c:	2001      	movs	r0, #1
 800045e:	f000 fa83 	bl	8000968 <Delay_us>

    // 5. E = 0
    HAL_GPIO_WritePin(MCU_CHAR_LCD_E_GPIO_Port, MCU_CHAR_LCD_E_Pin, LOW);
 8000462:	2200      	movs	r2, #0
 8000464:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <LCD_Command+0x100>)
 800046a:	f000 ff69 	bl	8001340 <HAL_GPIO_WritePin>

    // 6. Wait for 50us
    Delay_us(50);
 800046e:	2032      	movs	r0, #50	; 0x32
 8000470:	f000 fa7a 	bl	8000968 <Delay_us>
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	58020c00 	.word	0x58020c00

08000480 <LCD_Data>:


void LCD_Data(uint8_t data)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]
    // 1. E = 0, RS = 1
    HAL_GPIO_WritePin(MCU_CHAR_LCD_E_GPIO_Port, MCU_CHAR_LCD_E_Pin, LOW);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000490:	483b      	ldr	r0, [pc, #236]	; (8000580 <LCD_Data+0x100>)
 8000492:	f000 ff55 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_RS_GPIO_Port, MCU_CHAR_LCD_RS_Pin, HIGH);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049c:	4838      	ldr	r0, [pc, #224]	; (8000580 <LCD_Data+0x100>)
 800049e:	f000 ff4f 	bl	8001340 <HAL_GPIO_WritePin>
    Delay_us(1);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 fa60 	bl	8000968 <Delay_us>

    // 2. Write Command
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA0_GPIO_Port, MCU_CHAR_LCD_DATA0_Pin, (data & 0x01));
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	461a      	mov	r2, r3
 80004b2:	2101      	movs	r1, #1
 80004b4:	4832      	ldr	r0, [pc, #200]	; (8000580 <LCD_Data+0x100>)
 80004b6:	f000 ff43 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA1_GPIO_Port, MCU_CHAR_LCD_DATA1_Pin, ((data >> 1) & 0x01));
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	085b      	lsrs	r3, r3, #1
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	461a      	mov	r2, r3
 80004c8:	2102      	movs	r1, #2
 80004ca:	482d      	ldr	r0, [pc, #180]	; (8000580 <LCD_Data+0x100>)
 80004cc:	f000 ff38 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA2_GPIO_Port, MCU_CHAR_LCD_DATA2_Pin, ((data >> 2) & 0x01));
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	089b      	lsrs	r3, r3, #2
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	461a      	mov	r2, r3
 80004de:	2104      	movs	r1, #4
 80004e0:	4827      	ldr	r0, [pc, #156]	; (8000580 <LCD_Data+0x100>)
 80004e2:	f000 ff2d 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA3_GPIO_Port, MCU_CHAR_LCD_DATA3_Pin, ((data >> 3) & 0x01));
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	08db      	lsrs	r3, r3, #3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	461a      	mov	r2, r3
 80004f4:	2108      	movs	r1, #8
 80004f6:	4822      	ldr	r0, [pc, #136]	; (8000580 <LCD_Data+0x100>)
 80004f8:	f000 ff22 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA4_GPIO_Port, MCU_CHAR_LCD_DATA4_Pin, ((data >> 4) & 0x01));
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	091b      	lsrs	r3, r3, #4
 8000500:	b2db      	uxtb	r3, r3
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	b2db      	uxtb	r3, r3
 8000508:	461a      	mov	r2, r3
 800050a:	2110      	movs	r1, #16
 800050c:	481c      	ldr	r0, [pc, #112]	; (8000580 <LCD_Data+0x100>)
 800050e:	f000 ff17 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA5_GPIO_Port, MCU_CHAR_LCD_DATA5_Pin, ((data >> 5) & 0x01));
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	095b      	lsrs	r3, r3, #5
 8000516:	b2db      	uxtb	r3, r3
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	b2db      	uxtb	r3, r3
 800051e:	461a      	mov	r2, r3
 8000520:	2120      	movs	r1, #32
 8000522:	4817      	ldr	r0, [pc, #92]	; (8000580 <LCD_Data+0x100>)
 8000524:	f000 ff0c 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA6_GPIO_Port, MCU_CHAR_LCD_DATA6_Pin, ((data >> 6) & 0x01));
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	099b      	lsrs	r3, r3, #6
 800052c:	b2db      	uxtb	r3, r3
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	b2db      	uxtb	r3, r3
 8000534:	461a      	mov	r2, r3
 8000536:	2140      	movs	r1, #64	; 0x40
 8000538:	4811      	ldr	r0, [pc, #68]	; (8000580 <LCD_Data+0x100>)
 800053a:	f000 ff01 	bl	8001340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA7_GPIO_Port, MCU_CHAR_LCD_DATA7_Pin, ((data >> 7) & 0x01));
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	09db      	lsrs	r3, r3, #7
 8000542:	b2db      	uxtb	r3, r3
 8000544:	461a      	mov	r2, r3
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	480d      	ldr	r0, [pc, #52]	; (8000580 <LCD_Data+0x100>)
 800054a:	f000 fef9 	bl	8001340 <HAL_GPIO_WritePin>
    Delay_us(1);
 800054e:	2001      	movs	r0, #1
 8000550:	f000 fa0a 	bl	8000968 <Delay_us>

    // 3. E = 1
    HAL_GPIO_WritePin(MCU_CHAR_LCD_E_GPIO_Port, MCU_CHAR_LCD_E_Pin, HIGH);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055a:	4809      	ldr	r0, [pc, #36]	; (8000580 <LCD_Data+0x100>)
 800055c:	f000 fef0 	bl	8001340 <HAL_GPIO_WritePin>

    // 4. Wait for 1us
    Delay_us(1);
 8000560:	2001      	movs	r0, #1
 8000562:	f000 fa01 	bl	8000968 <Delay_us>

    // 5. E = 0
    HAL_GPIO_WritePin(MCU_CHAR_LCD_E_GPIO_Port, MCU_CHAR_LCD_E_Pin, LOW);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056c:	4804      	ldr	r0, [pc, #16]	; (8000580 <LCD_Data+0x100>)
 800056e:	f000 fee7 	bl	8001340 <HAL_GPIO_WritePin>

    // 6. Wait for 50us
    Delay_us(50);
 8000572:	2032      	movs	r0, #50	; 0x32
 8000574:	f000 f9f8 	bl	8000968 <Delay_us>
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	58020c00 	.word	0x58020c00

08000584 <LCD_String>:


void LCD_String(uint8_t command, uint8_t* string)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	6039      	str	r1, [r7, #0]
 800058e:	71fb      	strb	r3, [r7, #7]
    LCD_Command(command);
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fef2 	bl	800037c <LCD_Command>

    while(*string != '\0')
 8000598:	e007      	b.n	80005aa <LCD_String+0x26>
    {
        LCD_Data(*string);
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ff6e 	bl	8000480 <LCD_Data>
        string++;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	3301      	adds	r3, #1
 80005a8:	603b      	str	r3, [r7, #0]
    while(*string != '\0')
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1f3      	bne.n	800059a <LCD_String+0x16>
    }
}
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fb3c 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f824 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f924 	bl	8000814 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005cc:	f000 f8ce 	bl	800076c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <main+0x48>)
 80005d2:	f001 ff1f 	bl	8002414 <HAL_TIM_Base_Start>

	HAL_Delay(10);
 80005d6:	200a      	movs	r0, #10
 80005d8:	f000 fbc2 	bl	8000d60 <HAL_Delay>
	Initialize_LCD();
 80005dc:	f7ff fe7c 	bl	80002d8 <Initialize_LCD>
	HAL_Delay(100);
 80005e0:	2064      	movs	r0, #100	; 0x64
 80005e2:	f000 fbbd 	bl	8000d60 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	LCD_String(0x80, str1);
 80005e6:	4908      	ldr	r1, [pc, #32]	; (8000608 <main+0x4c>)
 80005e8:	2080      	movs	r0, #128	; 0x80
 80005ea:	f7ff ffcb 	bl	8000584 <LCD_String>
	HAL_Delay(10);
 80005ee:	200a      	movs	r0, #10
 80005f0:	f000 fbb6 	bl	8000d60 <HAL_Delay>
	LCD_String(0xC0, str2);
 80005f4:	4905      	ldr	r1, [pc, #20]	; (800060c <main+0x50>)
 80005f6:	20c0      	movs	r0, #192	; 0xc0
 80005f8:	f7ff ffc4 	bl	8000584 <LCD_String>
	HAL_Delay(200);
 80005fc:	20c8      	movs	r0, #200	; 0xc8
 80005fe:	f000 fbaf 	bl	8000d60 <HAL_Delay>
	LCD_String(0x80, str1);
 8000602:	e7f0      	b.n	80005e6 <main+0x2a>
 8000604:	2400004c 	.word	0x2400004c
 8000608:	24000000 	.word	0x24000000
 800060c:	24000010 	.word	0x24000010

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b09e      	sub	sp, #120	; 0x78
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800061a:	224c      	movs	r2, #76	; 0x4c
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fa26 	bl	8002a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2220      	movs	r2, #32
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fa1f 	bl	8002a70 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000632:	2002      	movs	r0, #2
 8000634:	f000 fed2 	bl	80013dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b48      	ldr	r3, [pc, #288]	; (8000760 <SystemClock_Config+0x150>)
 800063e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000640:	4a47      	ldr	r2, [pc, #284]	; (8000760 <SystemClock_Config+0x150>)
 8000642:	f023 0301 	bic.w	r3, r3, #1
 8000646:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000648:	4b45      	ldr	r3, [pc, #276]	; (8000760 <SystemClock_Config+0x150>)
 800064a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	4b44      	ldr	r3, [pc, #272]	; (8000764 <SystemClock_Config+0x154>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a43      	ldr	r2, [pc, #268]	; (8000764 <SystemClock_Config+0x154>)
 8000658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b41      	ldr	r3, [pc, #260]	; (8000764 <SystemClock_Config+0x154>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800066a:	bf00      	nop
 800066c:	4b3d      	ldr	r3, [pc, #244]	; (8000764 <SystemClock_Config+0x154>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000678:	d1f8      	bne.n	800066c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	4b3b      	ldr	r3, [pc, #236]	; (8000768 <SystemClock_Config+0x158>)
 800067c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000680:	4a39      	ldr	r2, [pc, #228]	; (8000768 <SystemClock_Config+0x158>)
 8000682:	f043 0302 	orr.w	r3, r3, #2
 8000686:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800068a:	4b37      	ldr	r3, [pc, #220]	; (8000768 <SystemClock_Config+0x158>)
 800068c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000690:	f003 0302 	and.w	r3, r3, #2
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	4b31      	ldr	r3, [pc, #196]	; (8000764 <SystemClock_Config+0x154>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a30      	ldr	r2, [pc, #192]	; (8000764 <SystemClock_Config+0x154>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <SystemClock_Config+0x154>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <SystemClock_Config+0x150>)
 80006b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b6:	4a2a      	ldr	r2, [pc, #168]	; (8000760 <SystemClock_Config+0x150>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006be:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0x150>)
 80006c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ca:	bf00      	nop
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0x154>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d8:	d1f8      	bne.n	80006cc <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006da:	2301      	movs	r3, #1
 80006dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006de:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e8:	2302      	movs	r3, #2
 80006ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006f0:	2350      	movs	r3, #80	; 0x50
 80006f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000700:	230c      	movs	r3, #12
 8000702:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000704:	2300      	movs	r3, #0
 8000706:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fe9d 	bl	8001450 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800071c:	f000 f93e 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	233f      	movs	r3, #63	; 0x3f
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2303      	movs	r3, #3
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800072c:	2308      	movs	r3, #8
 800072e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000730:	2340      	movs	r3, #64	; 0x40
 8000732:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800073e:	2340      	movs	r3, #64	; 0x40
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2104      	movs	r1, #4
 8000748:	4618      	mov	r0, r3
 800074a:	f001 fadb 	bl	8001d04 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000754:	f000 f922 	bl	800099c <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3778      	adds	r7, #120	; 0x78
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	58000400 	.word	0x58000400
 8000764:	58024800 	.word	0x58024800
 8000768:	58024400 	.word	0x58024400

0800076c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_TIM1_Init+0xa0>)
 800078c:	4a20      	ldr	r2, [pc, #128]	; (8000810 <MX_TIM1_Init+0xa4>)
 800078e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (240-1);
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_TIM1_Init+0xa0>)
 8000792:	22ef      	movs	r2, #239	; 0xef
 8000794:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_TIM1_Init+0xa0>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_TIM1_Init+0xa0>)
 800079e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_TIM1_Init+0xa0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_TIM1_Init+0xa0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_TIM1_Init+0xa0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007b6:	4815      	ldr	r0, [pc, #84]	; (800080c <MX_TIM1_Init+0xa0>)
 80007b8:	f001 fdd4 	bl	8002364 <HAL_TIM_Base_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80007c2:	f000 f8eb 	bl	800099c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <MX_TIM1_Init+0xa0>)
 80007d4:	f001 fe8e 	bl	80024f4 <HAL_TIM_ConfigClockSource>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80007de:	f000 f8dd 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_TIM1_Init+0xa0>)
 80007f4:	f002 f8ae 	bl	8002954 <HAL_TIMEx_MasterConfigSynchronization>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007fe:	f000 f8cd 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2400004c 	.word	0x2400004c
 8000810:	40010000 	.word	0x40010000

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b4b      	ldr	r3, [pc, #300]	; (8000958 <MX_GPIO_Init+0x144>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	4a49      	ldr	r2, [pc, #292]	; (8000958 <MX_GPIO_Init+0x144>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083a:	4b47      	ldr	r3, [pc, #284]	; (8000958 <MX_GPIO_Init+0x144>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000848:	4b43      	ldr	r3, [pc, #268]	; (8000958 <MX_GPIO_Init+0x144>)
 800084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084e:	4a42      	ldr	r2, [pc, #264]	; (8000958 <MX_GPIO_Init+0x144>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000858:	4b3f      	ldr	r3, [pc, #252]	; (8000958 <MX_GPIO_Init+0x144>)
 800085a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b3c      	ldr	r3, [pc, #240]	; (8000958 <MX_GPIO_Init+0x144>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	4a3a      	ldr	r2, [pc, #232]	; (8000958 <MX_GPIO_Init+0x144>)
 800086e:	f043 0302 	orr.w	r3, r3, #2
 8000872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000876:	4b38      	ldr	r3, [pc, #224]	; (8000958 <MX_GPIO_Init+0x144>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000884:	4b34      	ldr	r3, [pc, #208]	; (8000958 <MX_GPIO_Init+0x144>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088a:	4a33      	ldr	r2, [pc, #204]	; (8000958 <MX_GPIO_Init+0x144>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000894:	4b30      	ldr	r3, [pc, #192]	; (8000958 <MX_GPIO_Init+0x144>)
 8000896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <MX_GPIO_Init+0x144>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	4a2b      	ldr	r2, [pc, #172]	; (8000958 <MX_GPIO_Init+0x144>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b2:	4b29      	ldr	r3, [pc, #164]	; (8000958 <MX_GPIO_Init+0x144>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED1_BLUE_Pin|MCU_LED1_GREEN_Pin|MCU_LED2_RED_Pin|MCU_LED1_RED_Pin
 80008c0:	2201      	movs	r2, #1
 80008c2:	f241 3115 	movw	r1, #4885	; 0x1315
 80008c6:	4825      	ldr	r0, [pc, #148]	; (800095c <MX_GPIO_Init+0x148>)
 80008c8:	f000 fd3a 	bl	8001340 <HAL_GPIO_WritePin>
                          |MCU_LED2_BLUE_Pin|MCU_LED2_GREEN_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MCU_CHAR_LCD_RS_Pin|MCU_CHAR_LCD_RW_Pin|MCU_CHAR_LCD_E_Pin|MCU_CHAR_LCD_DATA0_Pin
 80008cc:	2200      	movs	r2, #0
 80008ce:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80008d2:	4823      	ldr	r0, [pc, #140]	; (8000960 <MX_GPIO_Init+0x14c>)
 80008d4:	f000 fd34 	bl	8001340 <HAL_GPIO_WritePin>
                          |MCU_CHAR_LCD_DATA1_Pin|MCU_CHAR_LCD_DATA2_Pin|MCU_CHAR_LCD_DATA3_Pin|MCU_CHAR_LCD_DATA4_Pin
                          |MCU_CHAR_LCD_DATA5_Pin|MCU_CHAR_LCD_DATA6_Pin|MCU_CHAR_LCD_DATA7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MCU_TACT_SW1_Pin MCU_TACT_SW2_Pin */
  GPIO_InitStruct.Pin = MCU_TACT_SW1_Pin|MCU_TACT_SW2_Pin;
 80008d8:	2303      	movs	r3, #3
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	481d      	ldr	r0, [pc, #116]	; (8000964 <MX_GPIO_Init+0x150>)
 80008ee:	f000 fb77 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED1_BLUE_Pin MCU_LED1_GREEN_Pin MCU_LED2_RED_Pin MCU_LED1_RED_Pin
                           MCU_LED2_BLUE_Pin MCU_LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = MCU_LED1_BLUE_Pin|MCU_LED1_GREEN_Pin|MCU_LED2_RED_Pin|MCU_LED1_RED_Pin
 80008f2:	f241 3315 	movw	r3, #4885	; 0x1315
 80008f6:	617b      	str	r3, [r7, #20]
                          |MCU_LED2_BLUE_Pin|MCU_LED2_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4814      	ldr	r0, [pc, #80]	; (800095c <MX_GPIO_Init+0x148>)
 800090c:	f000 fb68 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CHAR_LCD_RS_Pin MCU_CHAR_LCD_RW_Pin MCU_CHAR_LCD_E_Pin MCU_CHAR_LCD_DATA0_Pin
                           MCU_CHAR_LCD_DATA1_Pin MCU_CHAR_LCD_DATA2_Pin MCU_CHAR_LCD_DATA3_Pin MCU_CHAR_LCD_DATA4_Pin
                           MCU_CHAR_LCD_DATA5_Pin MCU_CHAR_LCD_DATA6_Pin MCU_CHAR_LCD_DATA7_Pin */
  GPIO_InitStruct.Pin = MCU_CHAR_LCD_RS_Pin|MCU_CHAR_LCD_RW_Pin|MCU_CHAR_LCD_E_Pin|MCU_CHAR_LCD_DATA0_Pin
 8000910:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000914:	617b      	str	r3, [r7, #20]
                          |MCU_CHAR_LCD_DATA1_Pin|MCU_CHAR_LCD_DATA2_Pin|MCU_CHAR_LCD_DATA3_Pin|MCU_CHAR_LCD_DATA4_Pin
                          |MCU_CHAR_LCD_DATA5_Pin|MCU_CHAR_LCD_DATA6_Pin|MCU_CHAR_LCD_DATA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_GPIO_Init+0x14c>)
 800092a:	f000 fb59 	bl	8000fe0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2006      	movs	r0, #6
 8000934:	f000 fb1f 	bl	8000f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000938:	2006      	movs	r0, #6
 800093a:	f000 fb36 	bl	8000faa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2007      	movs	r0, #7
 8000944:	f000 fb17 	bl	8000f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000948:	2007      	movs	r0, #7
 800094a:	f000 fb2e 	bl	8000faa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	58024400 	.word	0x58024400
 800095c:	58020400 	.word	0x58020400
 8000960:	58020c00 	.word	0x58020c00
 8000964:	58020800 	.word	0x58020800

08000968 <Delay_us>:

/* USER CODE BEGIN 4 */
void Delay_us(uint16_t time_us)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <Delay_us+0x30>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1))<time_us);
 800097a:	bf00      	nop
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <Delay_us+0x30>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	429a      	cmp	r2, r3
 8000986:	d3f9      	bcc.n	800097c <Delay_us+0x14>
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	2400004c 	.word	0x2400004c

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <HAL_MspInit+0x30>)
 80009b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009b4:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_MspInit+0x30>)
 80009b6:	f043 0302 	orr.w	r3, r3, #2
 80009ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_MspInit+0x30>)
 80009c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	58024400 	.word	0x58024400

080009dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <HAL_TIM_Base_MspInit+0x3c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10e      	bne.n	8000a0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_TIM_Base_MspInit+0x40>)
 80009f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009f4:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <HAL_TIM_Base_MspInit+0x40>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <HAL_TIM_Base_MspInit+0x40>)
 8000a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	40010000 	.word	0x40010000
 8000a1c:	58024400 	.word	0x58024400

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 f958 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCU_TACT_SW1_Pin);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f000 fc94 	bl	80013a6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCU_TACT_SW2_Pin);
 8000a86:	2002      	movs	r0, #2
 8000a88:	f000 fc8d 	bl	80013a6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MCU_TACT_SW1_Pin)
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d108      	bne.n	8000ab2 <HAL_GPIO_EXTI_Callback+0x22>
	{
		HAL_GPIO_TogglePin(MCU_LED1_RED_GPIO_Port, MCU_LED1_RED_Pin);
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000aa4:	f000 fc65 	bl	8001372 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(MCU_LED1_GREEN_GPIO_Port, MCU_LED1_GREEN_Pin);
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	480a      	ldr	r0, [pc, #40]	; (8000ad4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000aac:	f000 fc61 	bl	8001372 <HAL_GPIO_TogglePin>
	else if(GPIO_Pin == MCU_TACT_SW2_Pin)
	{
		HAL_GPIO_TogglePin(MCU_LED2_RED_GPIO_Port, MCU_LED2_RED_Pin);
		HAL_GPIO_TogglePin(MCU_LED2_GREEN_GPIO_Port, MCU_LED2_GREEN_Pin);
	}
}
 8000ab0:	e00c      	b.n	8000acc <HAL_GPIO_EXTI_Callback+0x3c>
	else if(GPIO_Pin == MCU_TACT_SW2_Pin)
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d109      	bne.n	8000acc <HAL_GPIO_EXTI_Callback+0x3c>
		HAL_GPIO_TogglePin(MCU_LED2_RED_GPIO_Port, MCU_LED2_RED_Pin);
 8000ab8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000abe:	f000 fc58 	bl	8001372 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(MCU_LED2_GREEN_GPIO_Port, MCU_LED2_GREEN_Pin);
 8000ac2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac6:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ac8:	f000 fc53 	bl	8001372 <HAL_GPIO_TogglePin>
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	58020400 	.word	0x58020400

08000ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000adc:	4b37      	ldr	r3, [pc, #220]	; (8000bbc <SystemInit+0xe4>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae2:	4a36      	ldr	r2, [pc, #216]	; (8000bbc <SystemInit+0xe4>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aec:	4b34      	ldr	r3, [pc, #208]	; (8000bc0 <SystemInit+0xe8>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f003 030f 	and.w	r3, r3, #15
 8000af4:	2b06      	cmp	r3, #6
 8000af6:	d807      	bhi.n	8000b08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000af8:	4b31      	ldr	r3, [pc, #196]	; (8000bc0 <SystemInit+0xe8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f023 030f 	bic.w	r3, r3, #15
 8000b00:	4a2f      	ldr	r2, [pc, #188]	; (8000bc0 <SystemInit+0xe8>)
 8000b02:	f043 0307 	orr.w	r3, r3, #7
 8000b06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b08:	4b2e      	ldr	r3, [pc, #184]	; (8000bc4 <SystemInit+0xec>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a2d      	ldr	r2, [pc, #180]	; (8000bc4 <SystemInit+0xec>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b14:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <SystemInit+0xec>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <SystemInit+0xec>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4929      	ldr	r1, [pc, #164]	; (8000bc4 <SystemInit+0xec>)
 8000b20:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <SystemInit+0xf0>)
 8000b22:	4013      	ands	r3, r2
 8000b24:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <SystemInit+0xe8>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d007      	beq.n	8000b42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b32:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <SystemInit+0xe8>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f023 030f 	bic.w	r3, r3, #15
 8000b3a:	4a21      	ldr	r2, [pc, #132]	; (8000bc0 <SystemInit+0xe8>)
 8000b3c:	f043 0307 	orr.w	r3, r3, #7
 8000b40:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <SystemInit+0xec>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <SystemInit+0xec>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <SystemInit+0xec>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <SystemInit+0xec>)
 8000b56:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <SystemInit+0xf4>)
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <SystemInit+0xec>)
 8000b5c:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <SystemInit+0xf8>)
 8000b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <SystemInit+0xec>)
 8000b62:	4a1c      	ldr	r2, [pc, #112]	; (8000bd4 <SystemInit+0xfc>)
 8000b64:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <SystemInit+0xec>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <SystemInit+0xec>)
 8000b6e:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <SystemInit+0xfc>)
 8000b70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <SystemInit+0xec>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <SystemInit+0xec>)
 8000b7a:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <SystemInit+0xfc>)
 8000b7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <SystemInit+0xec>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <SystemInit+0xec>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <SystemInit+0xec>)
 8000b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <SystemInit+0xec>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <SystemInit+0x100>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <SystemInit+0x104>)
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ba2:	d202      	bcs.n	8000baa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <SystemInit+0x108>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <SystemInit+0x10c>)
 8000bac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000bb0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00
 8000bc0:	52002000 	.word	0x52002000
 8000bc4:	58024400 	.word	0x58024400
 8000bc8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bcc:	02020200 	.word	0x02020200
 8000bd0:	01ff0000 	.word	0x01ff0000
 8000bd4:	01010280 	.word	0x01010280
 8000bd8:	5c001000 	.word	0x5c001000
 8000bdc:	ffff0000 	.word	0xffff0000
 8000be0:	51008108 	.word	0x51008108
 8000be4:	52004000 	.word	0x52004000

08000be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bec:	f7ff ff74 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bf2:	490d      	ldr	r1, [pc, #52]	; (8000c28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c08:	4c0a      	ldr	r4, [pc, #40]	; (8000c34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c16:	f001 ff33 	bl	8002a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1a:	f7ff fccf 	bl	80005bc <main>
  bx  lr
 8000c1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c28:	24000030 	.word	0x24000030
  ldr r2, =_sidata
 8000c2c:	08002af8 	.word	0x08002af8
  ldr r2, =_sbss
 8000c30:	24000030 	.word	0x24000030
  ldr r4, =_ebss
 8000c34:	2400009c 	.word	0x2400009c

08000c38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC3_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c42:	2003      	movs	r0, #3
 8000c44:	f000 f98c 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c48:	f001 fa12 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_Init+0x68>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	0a1b      	lsrs	r3, r3, #8
 8000c54:	f003 030f 	and.w	r3, r3, #15
 8000c58:	4913      	ldr	r1, [pc, #76]	; (8000ca8 <HAL_Init+0x6c>)
 8000c5a:	5ccb      	ldrb	r3, [r1, r3]
 8000c5c:	f003 031f 	and.w	r3, r3, #31
 8000c60:	fa22 f303 	lsr.w	r3, r2, r3
 8000c64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <HAL_Init+0x68>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <HAL_Init+0x6c>)
 8000c70:	5cd3      	ldrb	r3, [r2, r3]
 8000c72:	f003 031f 	and.w	r3, r3, #31
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <HAL_Init+0x70>)
 8000c7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c80:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <HAL_Init+0x74>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c86:	200f      	movs	r0, #15
 8000c88:	f000 f814 	bl	8000cb4 <HAL_InitTick>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e002      	b.n	8000c9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c96:	f7ff fe87 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	08002ae0 	.word	0x08002ae0
 8000cac:	24000024 	.word	0x24000024
 8000cb0:	24000020 	.word	0x24000020

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_InitTick+0x60>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d101      	bne.n	8000cc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e021      	b.n	8000d0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <HAL_InitTick+0x64>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_InitTick+0x60>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f971 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00e      	b.n	8000d0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d80a      	bhi.n	8000d0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f000 f93b 	bl	8000f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <HAL_InitTick+0x68>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2400002c 	.word	0x2400002c
 8000d18:	24000020 	.word	0x24000020
 8000d1c:	24000028 	.word	0x24000028

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x20>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_IncTick+0x24>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	2400002c 	.word	0x2400002c
 8000d44:	24000098 	.word	0x24000098

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_GetTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	24000098 	.word	0x24000098

08000d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff ffee 	bl	8000d48 <HAL_GetTick>
 8000d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d78:	d005      	beq.n	8000d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_Delay+0x44>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4413      	add	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d86:	bf00      	nop
 8000d88:	f7ff ffde 	bl	8000d48 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d8f7      	bhi.n	8000d88 <HAL_Delay+0x28>
  {
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2400002c 	.word	0x2400002c

08000da8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_GetREVID+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	0c1b      	lsrs	r3, r3, #16
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	5c001000 	.word	0x5c001000

08000dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <__NVIC_SetPriorityGrouping+0x40>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	4313      	orrs	r3, r2
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <__NVIC_SetPriorityGrouping+0x40>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00
 8000e04:	05fa0000 	.word	0x05fa0000

08000e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <__NVIC_GetPriorityGrouping+0x18>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	f003 0307 	and.w	r3, r3, #7
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db0b      	blt.n	8000e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	f003 021f 	and.w	r2, r3, #31
 8000e3c:	4907      	ldr	r1, [pc, #28]	; (8000e5c <__NVIC_EnableIRQ+0x38>)
 8000e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	2001      	movs	r0, #1
 8000e46:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000e100 	.word	0xe000e100

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	; (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	; 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <SysTick_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f7ff ff8e 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <SysTick_Config+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <SysTick_Config+0x40>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff29 	bl	8000dc0 <__NVIC_SetPriorityGrouping>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff40 	bl	8000e08 <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff90 	bl	8000eb4 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5f 	bl	8000e60 <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff33 	bl	8000e24 <__NVIC_EnableIRQ>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffa4 	bl	8000f1c <SysTick_Config>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fee:	4b89      	ldr	r3, [pc, #548]	; (8001214 <HAL_GPIO_Init+0x234>)
 8000ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ff2:	e194      	b.n	800131e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 8186 	beq.w	8001318 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d005      	beq.n	8001024 <HAL_GPIO_Init+0x44>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d130      	bne.n	8001086 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800105a:	2201      	movs	r2, #1
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	f003 0201 	and.w	r2, r3, #1
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b03      	cmp	r3, #3
 8001090:	d017      	beq.n	80010c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d123      	bne.n	8001116 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	08da      	lsrs	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3208      	adds	r2, #8
 80010d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	220f      	movs	r2, #15
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	691a      	ldr	r2, [r3, #16]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	08da      	lsrs	r2, r3, #3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	69b9      	ldr	r1, [r7, #24]
 8001112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0203 	and.w	r2, r3, #3
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 80e0 	beq.w	8001318 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001158:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <HAL_GPIO_Init+0x238>)
 800115a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800115e:	4a2e      	ldr	r2, [pc, #184]	; (8001218 <HAL_GPIO_Init+0x238>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001168:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <HAL_GPIO_Init+0x238>)
 800116a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001176:	4a29      	ldr	r2, [pc, #164]	; (800121c <HAL_GPIO_Init+0x23c>)
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a20      	ldr	r2, [pc, #128]	; (8001220 <HAL_GPIO_Init+0x240>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d052      	beq.n	8001248 <HAL_GPIO_Init+0x268>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a1f      	ldr	r2, [pc, #124]	; (8001224 <HAL_GPIO_Init+0x244>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d031      	beq.n	800120e <HAL_GPIO_Init+0x22e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <HAL_GPIO_Init+0x248>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d02b      	beq.n	800120a <HAL_GPIO_Init+0x22a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a1d      	ldr	r2, [pc, #116]	; (800122c <HAL_GPIO_Init+0x24c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d025      	beq.n	8001206 <HAL_GPIO_Init+0x226>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <HAL_GPIO_Init+0x250>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01f      	beq.n	8001202 <HAL_GPIO_Init+0x222>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <HAL_GPIO_Init+0x254>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_GPIO_Init+0x21e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <HAL_GPIO_Init+0x258>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0x21a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a19      	ldr	r2, [pc, #100]	; (800123c <HAL_GPIO_Init+0x25c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00d      	beq.n	80011f6 <HAL_GPIO_Init+0x216>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <HAL_GPIO_Init+0x260>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x212>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <HAL_GPIO_Init+0x264>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_GPIO_Init+0x20e>
 80011ea:	2309      	movs	r3, #9
 80011ec:	e02d      	b.n	800124a <HAL_GPIO_Init+0x26a>
 80011ee:	230a      	movs	r3, #10
 80011f0:	e02b      	b.n	800124a <HAL_GPIO_Init+0x26a>
 80011f2:	2308      	movs	r3, #8
 80011f4:	e029      	b.n	800124a <HAL_GPIO_Init+0x26a>
 80011f6:	2307      	movs	r3, #7
 80011f8:	e027      	b.n	800124a <HAL_GPIO_Init+0x26a>
 80011fa:	2306      	movs	r3, #6
 80011fc:	e025      	b.n	800124a <HAL_GPIO_Init+0x26a>
 80011fe:	2305      	movs	r3, #5
 8001200:	e023      	b.n	800124a <HAL_GPIO_Init+0x26a>
 8001202:	2304      	movs	r3, #4
 8001204:	e021      	b.n	800124a <HAL_GPIO_Init+0x26a>
 8001206:	2303      	movs	r3, #3
 8001208:	e01f      	b.n	800124a <HAL_GPIO_Init+0x26a>
 800120a:	2302      	movs	r3, #2
 800120c:	e01d      	b.n	800124a <HAL_GPIO_Init+0x26a>
 800120e:	2301      	movs	r3, #1
 8001210:	e01b      	b.n	800124a <HAL_GPIO_Init+0x26a>
 8001212:	bf00      	nop
 8001214:	58000080 	.word	0x58000080
 8001218:	58024400 	.word	0x58024400
 800121c:	58000400 	.word	0x58000400
 8001220:	58020000 	.word	0x58020000
 8001224:	58020400 	.word	0x58020400
 8001228:	58020800 	.word	0x58020800
 800122c:	58020c00 	.word	0x58020c00
 8001230:	58021000 	.word	0x58021000
 8001234:	58021400 	.word	0x58021400
 8001238:	58021800 	.word	0x58021800
 800123c:	58021c00 	.word	0x58021c00
 8001240:	58022000 	.word	0x58022000
 8001244:	58022400 	.word	0x58022400
 8001248:	2300      	movs	r3, #0
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	f002 0203 	and.w	r2, r2, #3
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	4093      	lsls	r3, r2
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800125a:	4938      	ldr	r1, [pc, #224]	; (800133c <HAL_GPIO_Init+0x35c>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800128e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80012bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	3301      	adds	r3, #1
 800131c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	f47f ae63 	bne.w	8000ff4 <HAL_GPIO_Init+0x14>
  }
}
 800132e:	bf00      	nop
 8001330:	bf00      	nop
 8001332:	3724      	adds	r7, #36	; 0x24
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	58000400 	.word	0x58000400

08001340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800135c:	e003      	b.n	8001366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001384:	887a      	ldrh	r2, [r7, #2]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4013      	ands	r3, r2
 800138a:	041a      	lsls	r2, r3, #16
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43d9      	mvns	r1, r3
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	400b      	ands	r3, r1
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d008      	beq.n	80013d2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fb5f 	bl	8000a90 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <HAL_PWREx_ConfigSupply+0x70>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d00a      	beq.n	8001406 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_PWREx_ConfigSupply+0x70>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d001      	beq.n	8001402 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e01f      	b.n	8001442 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e01d      	b.n	8001442 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_PWREx_ConfigSupply+0x70>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f023 0207 	bic.w	r2, r3, #7
 800140e:	490f      	ldr	r1, [pc, #60]	; (800144c <HAL_PWREx_ConfigSupply+0x70>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4313      	orrs	r3, r2
 8001414:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001416:	f7ff fc97 	bl	8000d48 <HAL_GetTick>
 800141a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800141c:	e009      	b.n	8001432 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800141e:	f7ff fc93 	bl	8000d48 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800142c:	d901      	bls.n	8001432 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e007      	b.n	8001442 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_PWREx_ConfigSupply+0x70>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800143a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800143e:	d1ee      	bne.n	800141e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	58024800 	.word	0x58024800

08001450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	f000 bc48 	b.w	8001cf4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 8088 	beq.w	8001582 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001472:	4b99      	ldr	r3, [pc, #612]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800147c:	4b96      	ldr	r3, [pc, #600]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001484:	2b10      	cmp	r3, #16
 8001486:	d007      	beq.n	8001498 <HAL_RCC_OscConfig+0x48>
 8001488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148a:	2b18      	cmp	r3, #24
 800148c:	d111      	bne.n	80014b2 <HAL_RCC_OscConfig+0x62>
 800148e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d10c      	bne.n	80014b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	4b8f      	ldr	r3, [pc, #572]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d06d      	beq.n	8001580 <HAL_RCC_OscConfig+0x130>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d169      	bne.n	8001580 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	f000 bc21 	b.w	8001cf4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ba:	d106      	bne.n	80014ca <HAL_RCC_OscConfig+0x7a>
 80014bc:	4b86      	ldr	r3, [pc, #536]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a85      	ldr	r2, [pc, #532]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80014c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	e02e      	b.n	8001528 <HAL_RCC_OscConfig+0xd8>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x9c>
 80014d2:	4b81      	ldr	r3, [pc, #516]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a80      	ldr	r2, [pc, #512]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80014d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b7e      	ldr	r3, [pc, #504]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a7d      	ldr	r2, [pc, #500]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80014e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e01d      	b.n	8001528 <HAL_RCC_OscConfig+0xd8>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0xc0>
 80014f6:	4b78      	ldr	r3, [pc, #480]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a77      	ldr	r2, [pc, #476]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b75      	ldr	r3, [pc, #468]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a74      	ldr	r2, [pc, #464]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e00b      	b.n	8001528 <HAL_RCC_OscConfig+0xd8>
 8001510:	4b71      	ldr	r3, [pc, #452]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a70      	ldr	r2, [pc, #448]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 8001516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b6e      	ldr	r3, [pc, #440]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a6d      	ldr	r2, [pc, #436]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 8001522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d013      	beq.n	8001558 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fc0a 	bl	8000d48 <HAL_GetTick>
 8001534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fc06 	bl	8000d48 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e3d4      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800154a:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0xe8>
 8001556:	e014      	b.n	8001582 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fbf6 	bl	8000d48 <HAL_GetTick>
 800155c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fbf2 	bl	8000d48 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e3c0      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001572:	4b59      	ldr	r3, [pc, #356]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x110>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 80ca 	beq.w	8001724 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001590:	4b51      	ldr	r3, [pc, #324]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001598:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800159a:	4b4f      	ldr	r3, [pc, #316]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d007      	beq.n	80015b6 <HAL_RCC_OscConfig+0x166>
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	2b18      	cmp	r3, #24
 80015aa:	d156      	bne.n	800165a <HAL_RCC_OscConfig+0x20a>
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d151      	bne.n	800165a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b6:	4b48      	ldr	r3, [pc, #288]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <HAL_RCC_OscConfig+0x17e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e392      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015ce:	4b42      	ldr	r3, [pc, #264]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 0219 	bic.w	r2, r3, #25
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	493f      	ldr	r1, [pc, #252]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fbb2 	bl	8000d48 <HAL_GetTick>
 80015e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e8:	f7ff fbae 	bl	8000d48 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e37c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015fa:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	f7ff fbcf 	bl	8000da8 <HAL_GetREVID>
 800160a:	4603      	mov	r3, r0
 800160c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001610:	4293      	cmp	r3, r2
 8001612:	d817      	bhi.n	8001644 <HAL_RCC_OscConfig+0x1f4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	2b40      	cmp	r3, #64	; 0x40
 800161a:	d108      	bne.n	800162e <HAL_RCC_OscConfig+0x1de>
 800161c:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001624:	4a2c      	ldr	r2, [pc, #176]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 8001626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800162c:	e07a      	b.n	8001724 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	031b      	lsls	r3, r3, #12
 800163c:	4926      	ldr	r1, [pc, #152]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 800163e:	4313      	orrs	r3, r2
 8001640:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001642:	e06f      	b.n	8001724 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001644:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	061b      	lsls	r3, r3, #24
 8001652:	4921      	ldr	r1, [pc, #132]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001658:	e064      	b.n	8001724 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d047      	beq.n	80016f2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 0219 	bic.w	r2, r3, #25
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	491a      	ldr	r1, [pc, #104]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fb68 	bl	8000d48 <HAL_GetTick>
 8001678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167c:	f7ff fb64 	bl	8000d48 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e332      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169a:	f7ff fb85 	bl	8000da8 <HAL_GetREVID>
 800169e:	4603      	mov	r3, r0
 80016a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d819      	bhi.n	80016dc <HAL_RCC_OscConfig+0x28c>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	2b40      	cmp	r3, #64	; 0x40
 80016ae:	d108      	bne.n	80016c2 <HAL_RCC_OscConfig+0x272>
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80016ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016be:	6053      	str	r3, [r2, #4]
 80016c0:	e030      	b.n	8001724 <HAL_RCC_OscConfig+0x2d4>
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	031b      	lsls	r3, r3, #12
 80016d0:	4901      	ldr	r1, [pc, #4]	; (80016d8 <HAL_RCC_OscConfig+0x288>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	604b      	str	r3, [r1, #4]
 80016d6:	e025      	b.n	8001724 <HAL_RCC_OscConfig+0x2d4>
 80016d8:	58024400 	.word	0x58024400
 80016dc:	4b9a      	ldr	r3, [pc, #616]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	061b      	lsls	r3, r3, #24
 80016ea:	4997      	ldr	r1, [pc, #604]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
 80016f0:	e018      	b.n	8001724 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f2:	4b95      	ldr	r3, [pc, #596]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a94      	ldr	r2, [pc, #592]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff fb23 	bl	8000d48 <HAL_GetTick>
 8001702:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001706:	f7ff fb1f 	bl	8000d48 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e2ed      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001718:	4b8b      	ldr	r3, [pc, #556]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 80a9 	beq.w	8001884 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001732:	4b85      	ldr	r3, [pc, #532]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800173a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800173c:	4b82      	ldr	r3, [pc, #520]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	2b08      	cmp	r3, #8
 8001746:	d007      	beq.n	8001758 <HAL_RCC_OscConfig+0x308>
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2b18      	cmp	r3, #24
 800174c:	d13a      	bne.n	80017c4 <HAL_RCC_OscConfig+0x374>
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d135      	bne.n	80017c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001758:	4b7b      	ldr	r3, [pc, #492]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_OscConfig+0x320>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	2b80      	cmp	r3, #128	; 0x80
 800176a:	d001      	beq.n	8001770 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e2c1      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001770:	f7ff fb1a 	bl	8000da8 <HAL_GetREVID>
 8001774:	4603      	mov	r3, r0
 8001776:	f241 0203 	movw	r2, #4099	; 0x1003
 800177a:	4293      	cmp	r3, r2
 800177c:	d817      	bhi.n	80017ae <HAL_RCC_OscConfig+0x35e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	2b20      	cmp	r3, #32
 8001784:	d108      	bne.n	8001798 <HAL_RCC_OscConfig+0x348>
 8001786:	4b70      	ldr	r3, [pc, #448]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800178e:	4a6e      	ldr	r2, [pc, #440]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 8001790:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001794:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001796:	e075      	b.n	8001884 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001798:	4b6b      	ldr	r3, [pc, #428]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	069b      	lsls	r3, r3, #26
 80017a6:	4968      	ldr	r1, [pc, #416]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017ac:	e06a      	b.n	8001884 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017ae:	4b66      	ldr	r3, [pc, #408]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	061b      	lsls	r3, r3, #24
 80017bc:	4962      	ldr	r1, [pc, #392]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017c2:	e05f      	b.n	8001884 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d042      	beq.n	8001852 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017cc:	4b5e      	ldr	r3, [pc, #376]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a5d      	ldr	r2, [pc, #372]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 80017d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff fab6 	bl	8000d48 <HAL_GetTick>
 80017dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80017e0:	f7ff fab2 	bl	8000d48 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e280      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017f2:	4b55      	ldr	r3, [pc, #340]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017fe:	f7ff fad3 	bl	8000da8 <HAL_GetREVID>
 8001802:	4603      	mov	r3, r0
 8001804:	f241 0203 	movw	r2, #4099	; 0x1003
 8001808:	4293      	cmp	r3, r2
 800180a:	d817      	bhi.n	800183c <HAL_RCC_OscConfig+0x3ec>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	2b20      	cmp	r3, #32
 8001812:	d108      	bne.n	8001826 <HAL_RCC_OscConfig+0x3d6>
 8001814:	4b4c      	ldr	r3, [pc, #304]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800181c:	4a4a      	ldr	r2, [pc, #296]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 800181e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001822:	6053      	str	r3, [r2, #4]
 8001824:	e02e      	b.n	8001884 <HAL_RCC_OscConfig+0x434>
 8001826:	4b48      	ldr	r3, [pc, #288]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	069b      	lsls	r3, r3, #26
 8001834:	4944      	ldr	r1, [pc, #272]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 8001836:	4313      	orrs	r3, r2
 8001838:	604b      	str	r3, [r1, #4]
 800183a:	e023      	b.n	8001884 <HAL_RCC_OscConfig+0x434>
 800183c:	4b42      	ldr	r3, [pc, #264]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	061b      	lsls	r3, r3, #24
 800184a:	493f      	ldr	r1, [pc, #252]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 800184c:	4313      	orrs	r3, r2
 800184e:	60cb      	str	r3, [r1, #12]
 8001850:	e018      	b.n	8001884 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001852:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a3c      	ldr	r2, [pc, #240]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 8001858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800185c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185e:	f7ff fa73 	bl	8000d48 <HAL_GetTick>
 8001862:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001866:	f7ff fa6f 	bl	8000d48 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e23d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001878:	4b33      	ldr	r3, [pc, #204]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f0      	bne.n	8001866 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d036      	beq.n	80018fe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d019      	beq.n	80018cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001898:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 800189a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800189c:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a4:	f7ff fa50 	bl	8000d48 <HAL_GetTick>
 80018a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ac:	f7ff fa4c 	bl	8000d48 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e21a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 80018c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x45c>
 80018ca:	e018      	b.n	80018fe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018cc:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 80018ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d0:	4a1d      	ldr	r2, [pc, #116]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff fa36 	bl	8000d48 <HAL_GetTick>
 80018dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff fa32 	bl	8000d48 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e200      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 80018f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	2b00      	cmp	r3, #0
 8001908:	d039      	beq.n	800197e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d01c      	beq.n	800194c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 8001918:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800191c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800191e:	f7ff fa13 	bl	8000d48 <HAL_GetTick>
 8001922:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001926:	f7ff fa0f 	bl	8000d48 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e1dd      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_RCC_OscConfig+0x4f8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x4d6>
 8001944:	e01b      	b.n	800197e <HAL_RCC_OscConfig+0x52e>
 8001946:	bf00      	nop
 8001948:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800194c:	4b9b      	ldr	r3, [pc, #620]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a9a      	ldr	r2, [pc, #616]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001956:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001958:	f7ff f9f6 	bl	8000d48 <HAL_GetTick>
 800195c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001960:	f7ff f9f2 	bl	8000d48 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e1c0      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001972:	4b92      	ldr	r3, [pc, #584]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8081 	beq.w	8001a8e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800198c:	4b8c      	ldr	r3, [pc, #560]	; (8001bc0 <HAL_RCC_OscConfig+0x770>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a8b      	ldr	r2, [pc, #556]	; (8001bc0 <HAL_RCC_OscConfig+0x770>)
 8001992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001996:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001998:	f7ff f9d6 	bl	8000d48 <HAL_GetTick>
 800199c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a0:	f7ff f9d2 	bl	8000d48 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e1a0      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019b2:	4b83      	ldr	r3, [pc, #524]	; (8001bc0 <HAL_RCC_OscConfig+0x770>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d106      	bne.n	80019d4 <HAL_RCC_OscConfig+0x584>
 80019c6:	4b7d      	ldr	r3, [pc, #500]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ca:	4a7c      	ldr	r2, [pc, #496]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6713      	str	r3, [r2, #112]	; 0x70
 80019d2:	e02d      	b.n	8001a30 <HAL_RCC_OscConfig+0x5e0>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10c      	bne.n	80019f6 <HAL_RCC_OscConfig+0x5a6>
 80019dc:	4b77      	ldr	r3, [pc, #476]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	4a76      	ldr	r2, [pc, #472]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 80019e2:	f023 0301 	bic.w	r3, r3, #1
 80019e6:	6713      	str	r3, [r2, #112]	; 0x70
 80019e8:	4b74      	ldr	r3, [pc, #464]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	4a73      	ldr	r2, [pc, #460]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 80019ee:	f023 0304 	bic.w	r3, r3, #4
 80019f2:	6713      	str	r3, [r2, #112]	; 0x70
 80019f4:	e01c      	b.n	8001a30 <HAL_RCC_OscConfig+0x5e0>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b05      	cmp	r3, #5
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x5c8>
 80019fe:	4b6f      	ldr	r3, [pc, #444]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	4a6e      	ldr	r2, [pc, #440]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0a:	4b6c      	ldr	r3, [pc, #432]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	4a6b      	ldr	r2, [pc, #428]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6713      	str	r3, [r2, #112]	; 0x70
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0x5e0>
 8001a18:	4b68      	ldr	r3, [pc, #416]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1c:	4a67      	ldr	r2, [pc, #412]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	6713      	str	r3, [r2, #112]	; 0x70
 8001a24:	4b65      	ldr	r3, [pc, #404]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a28:	4a64      	ldr	r2, [pc, #400]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001a2a:	f023 0304 	bic.w	r3, r3, #4
 8001a2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d015      	beq.n	8001a64 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff f986 	bl	8000d48 <HAL_GetTick>
 8001a3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a40:	f7ff f982 	bl	8000d48 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e14e      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a56:	4b59      	ldr	r3, [pc, #356]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0ee      	beq.n	8001a40 <HAL_RCC_OscConfig+0x5f0>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff f970 	bl	8000d48 <HAL_GetTick>
 8001a68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f96c 	bl	8000d48 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e138      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a82:	4b4e      	ldr	r3, [pc, #312]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1ee      	bne.n	8001a6c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 812d 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a98:	4b48      	ldr	r3, [pc, #288]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aa0:	2b18      	cmp	r3, #24
 8001aa2:	f000 80bd 	beq.w	8001c20 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	f040 809e 	bne.w	8001bec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab0:	4b42      	ldr	r3, [pc, #264]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a41      	ldr	r2, [pc, #260]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff f944 	bl	8000d48 <HAL_GetTick>
 8001ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff f940 	bl	8000d48 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e10e      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ad6:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae2:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ae6:	4b37      	ldr	r3, [pc, #220]	; (8001bc4 <HAL_RCC_OscConfig+0x774>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	430a      	orrs	r2, r1
 8001af6:	4931      	ldr	r1, [pc, #196]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	628b      	str	r3, [r1, #40]	; 0x28
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	3b01      	subs	r3, #1
 8001b02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	025b      	lsls	r3, r3, #9
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b16:	3b01      	subs	r3, #1
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b24:	3b01      	subs	r3, #1
 8001b26:	061b      	lsls	r3, r3, #24
 8001b28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b2c:	4923      	ldr	r1, [pc, #140]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	4a21      	ldr	r2, [pc, #132]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b42:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_RCC_OscConfig+0x778>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b4a:	00d2      	lsls	r2, r2, #3
 8001b4c:	491b      	ldr	r1, [pc, #108]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	f023 020c 	bic.w	r2, r3, #12
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4917      	ldr	r1, [pc, #92]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	f023 0202 	bic.w	r2, r3, #2
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b70:	4912      	ldr	r1, [pc, #72]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_RCC_OscConfig+0x76c>)
 8001bac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb2:	f7ff f8c9 	bl	8000d48 <HAL_GetTick>
 8001bb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bb8:	e011      	b.n	8001bde <HAL_RCC_OscConfig+0x78e>
 8001bba:	bf00      	nop
 8001bbc:	58024400 	.word	0x58024400
 8001bc0:	58024800 	.word	0x58024800
 8001bc4:	fffffc0c 	.word	0xfffffc0c
 8001bc8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7ff f8bc 	bl	8000d48 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e08a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bde:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <HAL_RCC_OscConfig+0x8ac>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x77c>
 8001bea:	e082      	b.n	8001cf2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bec:	4b43      	ldr	r3, [pc, #268]	; (8001cfc <HAL_RCC_OscConfig+0x8ac>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a42      	ldr	r2, [pc, #264]	; (8001cfc <HAL_RCC_OscConfig+0x8ac>)
 8001bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f8a6 	bl	8000d48 <HAL_GetTick>
 8001bfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff f8a2 	bl	8000d48 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e070      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c12:	4b3a      	ldr	r3, [pc, #232]	; (8001cfc <HAL_RCC_OscConfig+0x8ac>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x7b0>
 8001c1e:	e068      	b.n	8001cf2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c20:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <HAL_RCC_OscConfig+0x8ac>)
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c26:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <HAL_RCC_OscConfig+0x8ac>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d031      	beq.n	8001c98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	f003 0203 	and.w	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d12a      	bne.n	8001c98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d122      	bne.n	8001c98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d11a      	bne.n	8001c98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	0a5b      	lsrs	r3, r3, #9
 8001c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d111      	bne.n	8001c98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	0c1b      	lsrs	r3, r3, #16
 8001c78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d108      	bne.n	8001c98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	0e1b      	lsrs	r3, r3, #24
 8001c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c92:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e02b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_RCC_OscConfig+0x8ac>)
 8001c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca0:	08db      	lsrs	r3, r3, #3
 8001ca2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ca6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d01f      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_RCC_OscConfig+0x8ac>)
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <HAL_RCC_OscConfig+0x8ac>)
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cbe:	f7ff f843 	bl	8000d48 <HAL_GetTick>
 8001cc2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001cc4:	bf00      	nop
 8001cc6:	f7ff f83f 	bl	8000d48 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d0f9      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_RCC_OscConfig+0x8ac>)
 8001cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_RCC_OscConfig+0x8b0>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cde:	00d2      	lsls	r2, r2, #3
 8001ce0:	4906      	ldr	r1, [pc, #24]	; (8001cfc <HAL_RCC_OscConfig+0x8ac>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCC_OscConfig+0x8ac>)
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <HAL_RCC_OscConfig+0x8ac>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3730      	adds	r7, #48	; 0x30
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	58024400 	.word	0x58024400
 8001d00:	ffff0007 	.word	0xffff0007

08001d04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e19c      	b.n	8002052 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b8a      	ldr	r3, [pc, #552]	; (8001f44 <HAL_RCC_ClockConfig+0x240>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d910      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b87      	ldr	r3, [pc, #540]	; (8001f44 <HAL_RCC_ClockConfig+0x240>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 020f 	bic.w	r2, r3, #15
 8001d2e:	4985      	ldr	r1, [pc, #532]	; (8001f44 <HAL_RCC_ClockConfig+0x240>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b83      	ldr	r3, [pc, #524]	; (8001f44 <HAL_RCC_ClockConfig+0x240>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e184      	b.n	8002052 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d010      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	4b7b      	ldr	r3, [pc, #492]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d908      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d64:	4b78      	ldr	r3, [pc, #480]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	4975      	ldr	r1, [pc, #468]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d010      	beq.n	8001da4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	4b70      	ldr	r3, [pc, #448]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d908      	bls.n	8001da4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d92:	4b6d      	ldr	r3, [pc, #436]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	496a      	ldr	r1, [pc, #424]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d010      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699a      	ldr	r2, [r3, #24]
 8001db4:	4b64      	ldr	r3, [pc, #400]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d908      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001dc0:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	495e      	ldr	r1, [pc, #376]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d010      	beq.n	8001e00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	4b59      	ldr	r3, [pc, #356]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d908      	bls.n	8001e00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001dee:	4b56      	ldr	r3, [pc, #344]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	4953      	ldr	r1, [pc, #332]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d010      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	4b4d      	ldr	r3, [pc, #308]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d908      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e1c:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f023 020f 	bic.w	r2, r3, #15
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4947      	ldr	r1, [pc, #284]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d055      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e3a:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4940      	ldr	r1, [pc, #256]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e54:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d121      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0f6      	b.n	8002052 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e6c:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d115      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0ea      	b.n	8002052 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e84:	4b30      	ldr	r3, [pc, #192]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0de      	b.n	8002052 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0d6      	b.n	8002052 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f023 0207 	bic.w	r2, r3, #7
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4925      	ldr	r1, [pc, #148]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb6:	f7fe ff47 	bl	8000d48 <HAL_GetTick>
 8001eba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ebe:	f7fe ff43 	bl	8000d48 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e0be      	b.n	8002052 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed4:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d1eb      	bne.n	8001ebe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d010      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d208      	bcs.n	8001f14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f023 020f 	bic.w	r2, r3, #15
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	490e      	ldr	r1, [pc, #56]	; (8001f48 <HAL_RCC_ClockConfig+0x244>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_ClockConfig+0x240>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d214      	bcs.n	8001f4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_RCC_ClockConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 020f 	bic.w	r2, r3, #15
 8001f2a:	4906      	ldr	r1, [pc, #24]	; (8001f44 <HAL_RCC_ClockConfig+0x240>)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <HAL_RCC_ClockConfig+0x240>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e086      	b.n	8002052 <HAL_RCC_ClockConfig+0x34e>
 8001f44:	52002000 	.word	0x52002000
 8001f48:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d010      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	4b3f      	ldr	r3, [pc, #252]	; (800205c <HAL_RCC_ClockConfig+0x358>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d208      	bcs.n	8001f7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f68:	4b3c      	ldr	r3, [pc, #240]	; (800205c <HAL_RCC_ClockConfig+0x358>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	4939      	ldr	r1, [pc, #228]	; (800205c <HAL_RCC_ClockConfig+0x358>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d010      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	4b34      	ldr	r3, [pc, #208]	; (800205c <HAL_RCC_ClockConfig+0x358>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d208      	bcs.n	8001fa8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f96:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_RCC_ClockConfig+0x358>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	492e      	ldr	r1, [pc, #184]	; (800205c <HAL_RCC_ClockConfig+0x358>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d010      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699a      	ldr	r2, [r3, #24]
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <HAL_RCC_ClockConfig+0x358>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d208      	bcs.n	8001fd6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fc4:	4b25      	ldr	r3, [pc, #148]	; (800205c <HAL_RCC_ClockConfig+0x358>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4922      	ldr	r1, [pc, #136]	; (800205c <HAL_RCC_ClockConfig+0x358>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d010      	beq.n	8002004 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69da      	ldr	r2, [r3, #28]
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_RCC_ClockConfig+0x358>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d208      	bcs.n	8002004 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <HAL_RCC_ClockConfig+0x358>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4917      	ldr	r1, [pc, #92]	; (800205c <HAL_RCC_ClockConfig+0x358>)
 8002000:	4313      	orrs	r3, r2
 8002002:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002004:	f000 f834 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 8002008:	4602      	mov	r2, r0
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_RCC_ClockConfig+0x358>)
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	4912      	ldr	r1, [pc, #72]	; (8002060 <HAL_RCC_ClockConfig+0x35c>)
 8002016:	5ccb      	ldrb	r3, [r1, r3]
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
 8002020:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <HAL_RCC_ClockConfig+0x358>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	4a0d      	ldr	r2, [pc, #52]	; (8002060 <HAL_RCC_ClockConfig+0x35c>)
 800202c:	5cd3      	ldrb	r3, [r2, r3]
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_RCC_ClockConfig+0x360>)
 800203a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_RCC_ClockConfig+0x364>)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_RCC_ClockConfig+0x368>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fe34 	bl	8000cb4 <HAL_InitTick>
 800204c:	4603      	mov	r3, r0
 800204e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002050:	7bfb      	ldrb	r3, [r7, #15]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	58024400 	.word	0x58024400
 8002060:	08002ae0 	.word	0x08002ae0
 8002064:	24000024 	.word	0x24000024
 8002068:	24000020 	.word	0x24000020
 800206c:	24000028 	.word	0x24000028

08002070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002076:	4bb3      	ldr	r3, [pc, #716]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800207e:	2b18      	cmp	r3, #24
 8002080:	f200 8155 	bhi.w	800232e <HAL_RCC_GetSysClockFreq+0x2be>
 8002084:	a201      	add	r2, pc, #4	; (adr r2, 800208c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208a:	bf00      	nop
 800208c:	080020f1 	.word	0x080020f1
 8002090:	0800232f 	.word	0x0800232f
 8002094:	0800232f 	.word	0x0800232f
 8002098:	0800232f 	.word	0x0800232f
 800209c:	0800232f 	.word	0x0800232f
 80020a0:	0800232f 	.word	0x0800232f
 80020a4:	0800232f 	.word	0x0800232f
 80020a8:	0800232f 	.word	0x0800232f
 80020ac:	08002117 	.word	0x08002117
 80020b0:	0800232f 	.word	0x0800232f
 80020b4:	0800232f 	.word	0x0800232f
 80020b8:	0800232f 	.word	0x0800232f
 80020bc:	0800232f 	.word	0x0800232f
 80020c0:	0800232f 	.word	0x0800232f
 80020c4:	0800232f 	.word	0x0800232f
 80020c8:	0800232f 	.word	0x0800232f
 80020cc:	0800211d 	.word	0x0800211d
 80020d0:	0800232f 	.word	0x0800232f
 80020d4:	0800232f 	.word	0x0800232f
 80020d8:	0800232f 	.word	0x0800232f
 80020dc:	0800232f 	.word	0x0800232f
 80020e0:	0800232f 	.word	0x0800232f
 80020e4:	0800232f 	.word	0x0800232f
 80020e8:	0800232f 	.word	0x0800232f
 80020ec:	08002123 	.word	0x08002123
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020f0:	4b94      	ldr	r3, [pc, #592]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d009      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020fc:	4b91      	ldr	r3, [pc, #580]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	4a90      	ldr	r2, [pc, #576]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
 800210c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800210e:	e111      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002110:	4b8d      	ldr	r3, [pc, #564]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002112:	61bb      	str	r3, [r7, #24]
      break;
 8002114:	e10e      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002116:	4b8d      	ldr	r3, [pc, #564]	; (800234c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002118:	61bb      	str	r3, [r7, #24]
      break;
 800211a:	e10b      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800211c:	4b8c      	ldr	r3, [pc, #560]	; (8002350 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800211e:	61bb      	str	r3, [r7, #24]
      break;
 8002120:	e108      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002122:	4b88      	ldr	r3, [pc, #544]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800212c:	4b85      	ldr	r3, [pc, #532]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002136:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002138:	4b82      	ldr	r3, [pc, #520]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002142:	4b80      	ldr	r3, [pc, #512]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002146:	08db      	lsrs	r3, r3, #3
 8002148:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	ee07 3a90 	vmov	s15, r3
 8002156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800215a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80e1 	beq.w	8002328 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b02      	cmp	r3, #2
 800216a:	f000 8083 	beq.w	8002274 <HAL_RCC_GetSysClockFreq+0x204>
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b02      	cmp	r3, #2
 8002172:	f200 80a1 	bhi.w	80022b8 <HAL_RCC_GetSysClockFreq+0x248>
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x114>
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d056      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002182:	e099      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002184:	4b6f      	ldr	r3, [pc, #444]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b00      	cmp	r3, #0
 800218e:	d02d      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002190:	4b6c      	ldr	r3, [pc, #432]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	4a6b      	ldr	r2, [pc, #428]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
 80021a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	ee07 3a90 	vmov	s15, r3
 80021a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ba:	4b62      	ldr	r3, [pc, #392]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c2:	ee07 3a90 	vmov	s15, r3
 80021c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002354 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80021ea:	e087      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002358 <HAL_RCC_GetSysClockFreq+0x2e8>
 80021fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021fe:	4b51      	ldr	r3, [pc, #324]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002206:	ee07 3a90 	vmov	s15, r3
 800220a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800220e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002212:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002354 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800221a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800221e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800222e:	e065      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800223a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800235c <HAL_RCC_GetSysClockFreq+0x2ec>
 800223e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002242:	4b40      	ldr	r3, [pc, #256]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002252:	ed97 6a02 	vldr	s12, [r7, #8]
 8002256:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002354 <HAL_RCC_GetSysClockFreq+0x2e4>
 800225a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800225e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800226a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002272:	e043      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800227e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002360 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002286:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002296:	ed97 6a02 	vldr	s12, [r7, #8]
 800229a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002354 <HAL_RCC_GetSysClockFreq+0x2e4>
 800229e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022b6:	e021      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800235c <HAL_RCC_GetSysClockFreq+0x2ec>
 80022c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ca:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022da:	ed97 6a02 	vldr	s12, [r7, #8]
 80022de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002354 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	0a5b      	lsrs	r3, r3, #9
 8002302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002306:	3301      	adds	r3, #1
 8002308:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	ee07 3a90 	vmov	s15, r3
 8002310:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002314:	edd7 6a07 	vldr	s13, [r7, #28]
 8002318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800231c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002320:	ee17 3a90 	vmov	r3, s15
 8002324:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002326:	e005      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]
      break;
 800232c:	e002      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002330:	61bb      	str	r3, [r7, #24]
      break;
 8002332:	bf00      	nop
  }

  return sysclockfreq;
 8002334:	69bb      	ldr	r3, [r7, #24]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	58024400 	.word	0x58024400
 8002348:	03d09000 	.word	0x03d09000
 800234c:	003d0900 	.word	0x003d0900
 8002350:	00b71b00 	.word	0x00b71b00
 8002354:	46000000 	.word	0x46000000
 8002358:	4c742400 	.word	0x4c742400
 800235c:	4a742400 	.word	0x4a742400
 8002360:	4b371b00 	.word	0x4b371b00

08002364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e049      	b.n	800240a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe fb26 	bl	80009dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3304      	adds	r3, #4
 80023a0:	4619      	mov	r1, r3
 80023a2:	4610      	mov	r0, r2
 80023a4:	f000 f99e 	bl	80026e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d001      	beq.n	800242c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e04c      	b.n	80024c6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a26      	ldr	r2, [pc, #152]	; (80024d4 <HAL_TIM_Base_Start+0xc0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d022      	beq.n	8002484 <HAL_TIM_Base_Start+0x70>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002446:	d01d      	beq.n	8002484 <HAL_TIM_Base_Start+0x70>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <HAL_TIM_Base_Start+0xc4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d018      	beq.n	8002484 <HAL_TIM_Base_Start+0x70>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a21      	ldr	r2, [pc, #132]	; (80024dc <HAL_TIM_Base_Start+0xc8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d013      	beq.n	8002484 <HAL_TIM_Base_Start+0x70>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1f      	ldr	r2, [pc, #124]	; (80024e0 <HAL_TIM_Base_Start+0xcc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00e      	beq.n	8002484 <HAL_TIM_Base_Start+0x70>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1e      	ldr	r2, [pc, #120]	; (80024e4 <HAL_TIM_Base_Start+0xd0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d009      	beq.n	8002484 <HAL_TIM_Base_Start+0x70>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <HAL_TIM_Base_Start+0xd4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d004      	beq.n	8002484 <HAL_TIM_Base_Start+0x70>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <HAL_TIM_Base_Start+0xd8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d115      	bne.n	80024b0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_TIM_Base_Start+0xdc>)
 800248c:	4013      	ands	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b06      	cmp	r3, #6
 8002494:	d015      	beq.n	80024c2 <HAL_TIM_Base_Start+0xae>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249c:	d011      	beq.n	80024c2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ae:	e008      	b.n	80024c2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e000      	b.n	80024c4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40010000 	.word	0x40010000
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40000800 	.word	0x40000800
 80024e0:	40000c00 	.word	0x40000c00
 80024e4:	40010400 	.word	0x40010400
 80024e8:	40001800 	.word	0x40001800
 80024ec:	40014000 	.word	0x40014000
 80024f0:	00010007 	.word	0x00010007

080024f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_TIM_ConfigClockSource+0x1c>
 800250c:	2302      	movs	r3, #2
 800250e:	e0dc      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x1d6>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	4b6a      	ldr	r3, [pc, #424]	; (80026d4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800252c:	4013      	ands	r3, r2
 800252e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002536:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a64      	ldr	r2, [pc, #400]	; (80026d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	f000 80a9 	beq.w	800269e <HAL_TIM_ConfigClockSource+0x1aa>
 800254c:	4a62      	ldr	r2, [pc, #392]	; (80026d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	f200 80ae 	bhi.w	80026b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002554:	4a61      	ldr	r2, [pc, #388]	; (80026dc <HAL_TIM_ConfigClockSource+0x1e8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	f000 80a1 	beq.w	800269e <HAL_TIM_ConfigClockSource+0x1aa>
 800255c:	4a5f      	ldr	r2, [pc, #380]	; (80026dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	f200 80a6 	bhi.w	80026b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002564:	4a5e      	ldr	r2, [pc, #376]	; (80026e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002566:	4293      	cmp	r3, r2
 8002568:	f000 8099 	beq.w	800269e <HAL_TIM_ConfigClockSource+0x1aa>
 800256c:	4a5c      	ldr	r2, [pc, #368]	; (80026e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800256e:	4293      	cmp	r3, r2
 8002570:	f200 809e 	bhi.w	80026b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002574:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002578:	f000 8091 	beq.w	800269e <HAL_TIM_ConfigClockSource+0x1aa>
 800257c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002580:	f200 8096 	bhi.w	80026b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002584:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002588:	f000 8089 	beq.w	800269e <HAL_TIM_ConfigClockSource+0x1aa>
 800258c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002590:	f200 808e 	bhi.w	80026b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002598:	d03e      	beq.n	8002618 <HAL_TIM_ConfigClockSource+0x124>
 800259a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800259e:	f200 8087 	bhi.w	80026b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80025a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a6:	f000 8086 	beq.w	80026b6 <HAL_TIM_ConfigClockSource+0x1c2>
 80025aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ae:	d87f      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80025b0:	2b70      	cmp	r3, #112	; 0x70
 80025b2:	d01a      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0xf6>
 80025b4:	2b70      	cmp	r3, #112	; 0x70
 80025b6:	d87b      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80025b8:	2b60      	cmp	r3, #96	; 0x60
 80025ba:	d050      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x16a>
 80025bc:	2b60      	cmp	r3, #96	; 0x60
 80025be:	d877      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80025c0:	2b50      	cmp	r3, #80	; 0x50
 80025c2:	d03c      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x14a>
 80025c4:	2b50      	cmp	r3, #80	; 0x50
 80025c6:	d873      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d058      	beq.n	800267e <HAL_TIM_ConfigClockSource+0x18a>
 80025cc:	2b40      	cmp	r3, #64	; 0x40
 80025ce:	d86f      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80025d0:	2b30      	cmp	r3, #48	; 0x30
 80025d2:	d064      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x1aa>
 80025d4:	2b30      	cmp	r3, #48	; 0x30
 80025d6:	d86b      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d060      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x1aa>
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d867      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d05c      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x1aa>
 80025e4:	2b10      	cmp	r3, #16
 80025e6:	d05a      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x1aa>
 80025e8:	e062      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025fa:	f000 f98b 	bl	8002914 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800260c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	609a      	str	r2, [r3, #8]
      break;
 8002616:	e04f      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002628:	f000 f974 	bl	8002914 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800263a:	609a      	str	r2, [r3, #8]
      break;
 800263c:	e03c      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800264a:	461a      	mov	r2, r3
 800264c:	f000 f8e4 	bl	8002818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2150      	movs	r1, #80	; 0x50
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f93e 	bl	80028d8 <TIM_ITRx_SetConfig>
      break;
 800265c:	e02c      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800266a:	461a      	mov	r2, r3
 800266c:	f000 f903 	bl	8002876 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2160      	movs	r1, #96	; 0x60
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f92e 	bl	80028d8 <TIM_ITRx_SetConfig>
      break;
 800267c:	e01c      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800268a:	461a      	mov	r2, r3
 800268c:	f000 f8c4 	bl	8002818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2140      	movs	r1, #64	; 0x40
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f91e 	bl	80028d8 <TIM_ITRx_SetConfig>
      break;
 800269c:	e00c      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4619      	mov	r1, r3
 80026a8:	4610      	mov	r0, r2
 80026aa:	f000 f915 	bl	80028d8 <TIM_ITRx_SetConfig>
      break;
 80026ae:	e003      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
      break;
 80026b4:	e000      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80026b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	ffceff88 	.word	0xffceff88
 80026d8:	00100040 	.word	0x00100040
 80026dc:	00100030 	.word	0x00100030
 80026e0:	00100020 	.word	0x00100020

080026e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a40      	ldr	r2, [pc, #256]	; (80027f8 <TIM_Base_SetConfig+0x114>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d013      	beq.n	8002724 <TIM_Base_SetConfig+0x40>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002702:	d00f      	beq.n	8002724 <TIM_Base_SetConfig+0x40>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a3d      	ldr	r2, [pc, #244]	; (80027fc <TIM_Base_SetConfig+0x118>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00b      	beq.n	8002724 <TIM_Base_SetConfig+0x40>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a3c      	ldr	r2, [pc, #240]	; (8002800 <TIM_Base_SetConfig+0x11c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d007      	beq.n	8002724 <TIM_Base_SetConfig+0x40>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a3b      	ldr	r2, [pc, #236]	; (8002804 <TIM_Base_SetConfig+0x120>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <TIM_Base_SetConfig+0x40>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a3a      	ldr	r2, [pc, #232]	; (8002808 <TIM_Base_SetConfig+0x124>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d108      	bne.n	8002736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a2f      	ldr	r2, [pc, #188]	; (80027f8 <TIM_Base_SetConfig+0x114>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01f      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002744:	d01b      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a2c      	ldr	r2, [pc, #176]	; (80027fc <TIM_Base_SetConfig+0x118>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d017      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a2b      	ldr	r2, [pc, #172]	; (8002800 <TIM_Base_SetConfig+0x11c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <TIM_Base_SetConfig+0x120>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00f      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a29      	ldr	r2, [pc, #164]	; (8002808 <TIM_Base_SetConfig+0x124>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00b      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a28      	ldr	r2, [pc, #160]	; (800280c <TIM_Base_SetConfig+0x128>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a27      	ldr	r2, [pc, #156]	; (8002810 <TIM_Base_SetConfig+0x12c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d003      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a26      	ldr	r2, [pc, #152]	; (8002814 <TIM_Base_SetConfig+0x130>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d108      	bne.n	8002790 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a10      	ldr	r2, [pc, #64]	; (80027f8 <TIM_Base_SetConfig+0x114>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d00f      	beq.n	80027dc <TIM_Base_SetConfig+0xf8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a12      	ldr	r2, [pc, #72]	; (8002808 <TIM_Base_SetConfig+0x124>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00b      	beq.n	80027dc <TIM_Base_SetConfig+0xf8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a11      	ldr	r2, [pc, #68]	; (800280c <TIM_Base_SetConfig+0x128>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d007      	beq.n	80027dc <TIM_Base_SetConfig+0xf8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a10      	ldr	r2, [pc, #64]	; (8002810 <TIM_Base_SetConfig+0x12c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d003      	beq.n	80027dc <TIM_Base_SetConfig+0xf8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <TIM_Base_SetConfig+0x130>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d103      	bne.n	80027e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	615a      	str	r2, [r3, #20]
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40010000 	.word	0x40010000
 80027fc:	40000400 	.word	0x40000400
 8002800:	40000800 	.word	0x40000800
 8002804:	40000c00 	.word	0x40000c00
 8002808:	40010400 	.word	0x40010400
 800280c:	40014000 	.word	0x40014000
 8002810:	40014400 	.word	0x40014400
 8002814:	40014800 	.word	0x40014800

08002818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f023 0201 	bic.w	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f023 030a 	bic.w	r3, r3, #10
 8002854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
 800285c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	621a      	str	r2, [r3, #32]
}
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002876:	b480      	push	{r7}
 8002878:	b087      	sub	sp, #28
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	f023 0210 	bic.w	r2, r3, #16
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	031b      	lsls	r3, r3, #12
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	621a      	str	r2, [r3, #32]
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <TIM_ITRx_SetConfig+0x38>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f043 0307 	orr.w	r3, r3, #7
 80028fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	609a      	str	r2, [r3, #8]
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	ffcfff8f 	.word	0xffcfff8f

08002914 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800292e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	021a      	lsls	r2, r3, #8
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	431a      	orrs	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4313      	orrs	r3, r2
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	4313      	orrs	r3, r2
 8002940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	609a      	str	r2, [r3, #8]
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002968:	2302      	movs	r3, #2
 800296a:	e06d      	b.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a30      	ldr	r2, [pc, #192]	; (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d004      	beq.n	80029a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a2f      	ldr	r2, [pc, #188]	; (8002a58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d108      	bne.n	80029b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80029a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d022      	beq.n	8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029de:	d01d      	beq.n	8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d018      	beq.n	8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1c      	ldr	r2, [pc, #112]	; (8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d013      	beq.n	8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1a      	ldr	r2, [pc, #104]	; (8002a64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00e      	beq.n	8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d009      	beq.n	8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a16      	ldr	r2, [pc, #88]	; (8002a68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d004      	beq.n	8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a15      	ldr	r2, [pc, #84]	; (8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d10c      	bne.n	8002a36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40010400 	.word	0x40010400
 8002a5c:	40000400 	.word	0x40000400
 8002a60:	40000800 	.word	0x40000800
 8002a64:	40000c00 	.word	0x40000c00
 8002a68:	40001800 	.word	0x40001800
 8002a6c:	40014000 	.word	0x40014000

08002a70 <memset>:
 8002a70:	4402      	add	r2, r0
 8002a72:	4603      	mov	r3, r0
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d100      	bne.n	8002a7a <memset+0xa>
 8002a78:	4770      	bx	lr
 8002a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a7e:	e7f9      	b.n	8002a74 <memset+0x4>

08002a80 <__libc_init_array>:
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	4d0d      	ldr	r5, [pc, #52]	; (8002ab8 <__libc_init_array+0x38>)
 8002a84:	4c0d      	ldr	r4, [pc, #52]	; (8002abc <__libc_init_array+0x3c>)
 8002a86:	1b64      	subs	r4, r4, r5
 8002a88:	10a4      	asrs	r4, r4, #2
 8002a8a:	2600      	movs	r6, #0
 8002a8c:	42a6      	cmp	r6, r4
 8002a8e:	d109      	bne.n	8002aa4 <__libc_init_array+0x24>
 8002a90:	4d0b      	ldr	r5, [pc, #44]	; (8002ac0 <__libc_init_array+0x40>)
 8002a92:	4c0c      	ldr	r4, [pc, #48]	; (8002ac4 <__libc_init_array+0x44>)
 8002a94:	f000 f818 	bl	8002ac8 <_init>
 8002a98:	1b64      	subs	r4, r4, r5
 8002a9a:	10a4      	asrs	r4, r4, #2
 8002a9c:	2600      	movs	r6, #0
 8002a9e:	42a6      	cmp	r6, r4
 8002aa0:	d105      	bne.n	8002aae <__libc_init_array+0x2e>
 8002aa2:	bd70      	pop	{r4, r5, r6, pc}
 8002aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa8:	4798      	blx	r3
 8002aaa:	3601      	adds	r6, #1
 8002aac:	e7ee      	b.n	8002a8c <__libc_init_array+0xc>
 8002aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab2:	4798      	blx	r3
 8002ab4:	3601      	adds	r6, #1
 8002ab6:	e7f2      	b.n	8002a9e <__libc_init_array+0x1e>
 8002ab8:	08002af0 	.word	0x08002af0
 8002abc:	08002af0 	.word	0x08002af0
 8002ac0:	08002af0 	.word	0x08002af0
 8002ac4:	08002af4 	.word	0x08002af4

08002ac8 <_init>:
 8002ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aca:	bf00      	nop
 8002acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ace:	bc08      	pop	{r3}
 8002ad0:	469e      	mov	lr, r3
 8002ad2:	4770      	bx	lr

08002ad4 <_fini>:
 8002ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad6:	bf00      	nop
 8002ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ada:	bc08      	pop	{r3}
 8002adc:	469e      	mov	lr, r3
 8002ade:	4770      	bx	lr
