
STM32H743VIT6_Dev_Bd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031ec  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003484  08003484  00013484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  24000000  0800349c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e0  24000014  080034b0  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240000f4  080034b0  000200f4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d9aa  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001d8f  00000000  00000000  0002da2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c28  00000000  00000000  0002f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000095c  00000000  00000000  000303e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035fbf  00000000  00000000  00030d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e9b7  00000000  00000000  00066d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a49f  00000000  00000000  000756ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000321c  00000000  00000000  001cfb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000b9  00000000  00000000  001d2d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800346c 	.word	0x0800346c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	0800346c 	.word	0x0800346c

080002d8 <Keypad_Get_Value>:
uint8_t Keypad_read_enable = OFF;



uint8_t Keypad_Get_Value(uint8_t row, uint8_t col)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	460a      	mov	r2, r1
 80002e2:	71fb      	strb	r3, [r7, #7]
 80002e4:	4613      	mov	r3, r2
 80002e6:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_value;

	switch(row)
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	3b01      	subs	r3, #1
 80002ec:	2b03      	cmp	r3, #3
 80002ee:	d853      	bhi.n	8000398 <Keypad_Get_Value+0xc0>
 80002f0:	a201      	add	r2, pc, #4	; (adr r2, 80002f8 <Keypad_Get_Value+0x20>)
 80002f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f6:	bf00      	nop
 80002f8:	08000309 	.word	0x08000309
 80002fc:	0800032d 	.word	0x0800032d
 8000300:	08000351 	.word	0x08000351
 8000304:	08000375 	.word	0x08000375
	{
		case KEYPAD_ROW1 :
							if(col == KEYPAD_COL1)			ret_value = '1';
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d102      	bne.n	8000314 <Keypad_Get_Value+0x3c>
 800030e:	2331      	movs	r3, #49	; 0x31
 8000310:	73fb      	strb	r3, [r7, #15]
							else if(col == KEYPAD_COL2)		ret_value = '2';
							else if(col == KEYPAD_COL3)		ret_value = '3';
							break;
 8000312:	e044      	b.n	800039e <Keypad_Get_Value+0xc6>
							else if(col == KEYPAD_COL2)		ret_value = '2';
 8000314:	79bb      	ldrb	r3, [r7, #6]
 8000316:	2b02      	cmp	r3, #2
 8000318:	d102      	bne.n	8000320 <Keypad_Get_Value+0x48>
 800031a:	2332      	movs	r3, #50	; 0x32
 800031c:	73fb      	strb	r3, [r7, #15]
							break;
 800031e:	e03e      	b.n	800039e <Keypad_Get_Value+0xc6>
							else if(col == KEYPAD_COL3)		ret_value = '3';
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	2b03      	cmp	r3, #3
 8000324:	d13b      	bne.n	800039e <Keypad_Get_Value+0xc6>
 8000326:	2333      	movs	r3, #51	; 0x33
 8000328:	73fb      	strb	r3, [r7, #15]
							break;
 800032a:	e038      	b.n	800039e <Keypad_Get_Value+0xc6>

		case KEYPAD_ROW2 :
							if(col == KEYPAD_COL1)			ret_value = '4';
 800032c:	79bb      	ldrb	r3, [r7, #6]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d102      	bne.n	8000338 <Keypad_Get_Value+0x60>
 8000332:	2334      	movs	r3, #52	; 0x34
 8000334:	73fb      	strb	r3, [r7, #15]
							else if(col == KEYPAD_COL2)		ret_value = '5';
							else if(col == KEYPAD_COL3)		ret_value = '6';
							break;
 8000336:	e034      	b.n	80003a2 <Keypad_Get_Value+0xca>
							else if(col == KEYPAD_COL2)		ret_value = '5';
 8000338:	79bb      	ldrb	r3, [r7, #6]
 800033a:	2b02      	cmp	r3, #2
 800033c:	d102      	bne.n	8000344 <Keypad_Get_Value+0x6c>
 800033e:	2335      	movs	r3, #53	; 0x35
 8000340:	73fb      	strb	r3, [r7, #15]
							break;
 8000342:	e02e      	b.n	80003a2 <Keypad_Get_Value+0xca>
							else if(col == KEYPAD_COL3)		ret_value = '6';
 8000344:	79bb      	ldrb	r3, [r7, #6]
 8000346:	2b03      	cmp	r3, #3
 8000348:	d12b      	bne.n	80003a2 <Keypad_Get_Value+0xca>
 800034a:	2336      	movs	r3, #54	; 0x36
 800034c:	73fb      	strb	r3, [r7, #15]
							break;
 800034e:	e028      	b.n	80003a2 <Keypad_Get_Value+0xca>

		case KEYPAD_ROW3 :
							if(col == KEYPAD_COL1)			ret_value = '7';
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d102      	bne.n	800035c <Keypad_Get_Value+0x84>
 8000356:	2337      	movs	r3, #55	; 0x37
 8000358:	73fb      	strb	r3, [r7, #15]
							else if(col == KEYPAD_COL2)		ret_value = '8';
							else if(col == KEYPAD_COL3)		ret_value = '9';
							break;
 800035a:	e024      	b.n	80003a6 <Keypad_Get_Value+0xce>
							else if(col == KEYPAD_COL2)		ret_value = '8';
 800035c:	79bb      	ldrb	r3, [r7, #6]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d102      	bne.n	8000368 <Keypad_Get_Value+0x90>
 8000362:	2338      	movs	r3, #56	; 0x38
 8000364:	73fb      	strb	r3, [r7, #15]
							break;
 8000366:	e01e      	b.n	80003a6 <Keypad_Get_Value+0xce>
							else if(col == KEYPAD_COL3)		ret_value = '9';
 8000368:	79bb      	ldrb	r3, [r7, #6]
 800036a:	2b03      	cmp	r3, #3
 800036c:	d11b      	bne.n	80003a6 <Keypad_Get_Value+0xce>
 800036e:	2339      	movs	r3, #57	; 0x39
 8000370:	73fb      	strb	r3, [r7, #15]
							break;
 8000372:	e018      	b.n	80003a6 <Keypad_Get_Value+0xce>

		case KEYPAD_ROW4 :
							if(col == KEYPAD_COL1)			ret_value = '*';
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d102      	bne.n	8000380 <Keypad_Get_Value+0xa8>
 800037a:	232a      	movs	r3, #42	; 0x2a
 800037c:	73fb      	strb	r3, [r7, #15]
							else if(col == KEYPAD_COL2)		ret_value = '0';
							else if(col == KEYPAD_COL3)		ret_value = '#';
							break;
 800037e:	e014      	b.n	80003aa <Keypad_Get_Value+0xd2>
							else if(col == KEYPAD_COL2)		ret_value = '0';
 8000380:	79bb      	ldrb	r3, [r7, #6]
 8000382:	2b02      	cmp	r3, #2
 8000384:	d102      	bne.n	800038c <Keypad_Get_Value+0xb4>
 8000386:	2330      	movs	r3, #48	; 0x30
 8000388:	73fb      	strb	r3, [r7, #15]
							break;
 800038a:	e00e      	b.n	80003aa <Keypad_Get_Value+0xd2>
							else if(col == KEYPAD_COL3)		ret_value = '#';
 800038c:	79bb      	ldrb	r3, [r7, #6]
 800038e:	2b03      	cmp	r3, #3
 8000390:	d10b      	bne.n	80003aa <Keypad_Get_Value+0xd2>
 8000392:	2323      	movs	r3, #35	; 0x23
 8000394:	73fb      	strb	r3, [r7, #15]
							break;
 8000396:	e008      	b.n	80003aa <Keypad_Get_Value+0xd2>

		default :
							ret_value = 'X';	// Error
 8000398:	2358      	movs	r3, #88	; 0x58
 800039a:	73fb      	strb	r3, [r7, #15]
							break;
 800039c:	e006      	b.n	80003ac <Keypad_Get_Value+0xd4>
							break;
 800039e:	bf00      	nop
 80003a0:	e004      	b.n	80003ac <Keypad_Get_Value+0xd4>
							break;
 80003a2:	bf00      	nop
 80003a4:	e002      	b.n	80003ac <Keypad_Get_Value+0xd4>
							break;
 80003a6:	bf00      	nop
 80003a8:	e000      	b.n	80003ac <Keypad_Get_Value+0xd4>
							break;
 80003aa:	bf00      	nop
	}

	return ret_value;
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop

080003bc <Keypad_Save_Value>:


void Keypad_Save_Value(uint8_t value)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
	static uint8_t data_index = 0;

	if( (data_index >= 0) && (data_index < 32) )
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <Keypad_Save_Value+0x44>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b1f      	cmp	r3, #31
 80003cc:	d812      	bhi.n	80003f4 <Keypad_Save_Value+0x38>
	{
		Keypad_Data[data_index] = value;
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <Keypad_Save_Value+0x44>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	4619      	mov	r1, r3
 80003d4:	4a0b      	ldr	r2, [pc, #44]	; (8000404 <Keypad_Save_Value+0x48>)
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	5453      	strb	r3, [r2, r1]
		data_index++;
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <Keypad_Save_Value+0x44>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	3301      	adds	r3, #1
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	4b07      	ldr	r3, [pc, #28]	; (8000400 <Keypad_Save_Value+0x44>)
 80003e4:	701a      	strb	r2, [r3, #0]
		if(data_index >= 32)
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <Keypad_Save_Value+0x44>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b1f      	cmp	r3, #31
 80003ec:	d902      	bls.n	80003f4 <Keypad_Save_Value+0x38>
		{
			data_index = 0;
 80003ee:	4b04      	ldr	r3, [pc, #16]	; (8000400 <Keypad_Save_Value+0x44>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	24000052 	.word	0x24000052
 8000404:	24000030 	.word	0x24000030

08000408 <Keypad_Row_Drive>:


void Keypad_Row_Drive(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	static uint8_t Keypad_drive_row_num = KEYPAD_ROW1;

	switch(Keypad_drive_row_num)
 800040c:	4b43      	ldr	r3, [pc, #268]	; (800051c <Keypad_Row_Drive+0x114>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	3b01      	subs	r3, #1
 8000412:	2b03      	cmp	r3, #3
 8000414:	d87e      	bhi.n	8000514 <Keypad_Row_Drive+0x10c>
 8000416:	a201      	add	r2, pc, #4	; (adr r2, 800041c <Keypad_Row_Drive+0x14>)
 8000418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041c:	0800042d 	.word	0x0800042d
 8000420:	08000467 	.word	0x08000467
 8000424:	080004a1 	.word	0x080004a1
 8000428:	080004db 	.word	0x080004db
	{
		case KEYPAD_ROW1 :
			Keypad_cur_row = KEYPAD_ROW1;
 800042c:	4b3c      	ldr	r3, [pc, #240]	; (8000520 <Keypad_Row_Drive+0x118>)
 800042e:	2201      	movs	r2, #1
 8000430:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW1_GPIO_Port, MCU_KEYPAD_ROW1_Pin, LOW);
 8000432:	2200      	movs	r2, #0
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	483b      	ldr	r0, [pc, #236]	; (8000524 <Keypad_Row_Drive+0x11c>)
 8000438:	f001 fa76 	bl	8001928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW2_GPIO_Port, MCU_KEYPAD_ROW2_Pin, HIGH);
 800043c:	2201      	movs	r2, #1
 800043e:	2180      	movs	r1, #128	; 0x80
 8000440:	4838      	ldr	r0, [pc, #224]	; (8000524 <Keypad_Row_Drive+0x11c>)
 8000442:	f001 fa71 	bl	8001928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW3_GPIO_Port, MCU_KEYPAD_ROW3_Pin, HIGH);
 8000446:	2201      	movs	r2, #1
 8000448:	f44f 7180 	mov.w	r1, #256	; 0x100
 800044c:	4835      	ldr	r0, [pc, #212]	; (8000524 <Keypad_Row_Drive+0x11c>)
 800044e:	f001 fa6b 	bl	8001928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW4_GPIO_Port, MCU_KEYPAD_ROW4_Pin, HIGH);
 8000452:	2201      	movs	r2, #1
 8000454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000458:	4832      	ldr	r0, [pc, #200]	; (8000524 <Keypad_Row_Drive+0x11c>)
 800045a:	f001 fa65 	bl	8001928 <HAL_GPIO_WritePin>

			Keypad_drive_row_num = KEYPAD_ROW2;
 800045e:	4b2f      	ldr	r3, [pc, #188]	; (800051c <Keypad_Row_Drive+0x114>)
 8000460:	2202      	movs	r2, #2
 8000462:	701a      	strb	r2, [r3, #0]
			break;
 8000464:	e057      	b.n	8000516 <Keypad_Row_Drive+0x10e>

		case KEYPAD_ROW2 :
			Keypad_cur_row = KEYPAD_ROW2;
 8000466:	4b2e      	ldr	r3, [pc, #184]	; (8000520 <Keypad_Row_Drive+0x118>)
 8000468:	2202      	movs	r2, #2
 800046a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW1_GPIO_Port, MCU_KEYPAD_ROW1_Pin, HIGH);
 800046c:	2201      	movs	r2, #1
 800046e:	2140      	movs	r1, #64	; 0x40
 8000470:	482c      	ldr	r0, [pc, #176]	; (8000524 <Keypad_Row_Drive+0x11c>)
 8000472:	f001 fa59 	bl	8001928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW2_GPIO_Port, MCU_KEYPAD_ROW2_Pin, LOW);
 8000476:	2200      	movs	r2, #0
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	482a      	ldr	r0, [pc, #168]	; (8000524 <Keypad_Row_Drive+0x11c>)
 800047c:	f001 fa54 	bl	8001928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW3_GPIO_Port, MCU_KEYPAD_ROW3_Pin, HIGH);
 8000480:	2201      	movs	r2, #1
 8000482:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000486:	4827      	ldr	r0, [pc, #156]	; (8000524 <Keypad_Row_Drive+0x11c>)
 8000488:	f001 fa4e 	bl	8001928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW4_GPIO_Port, MCU_KEYPAD_ROW4_Pin, HIGH);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000492:	4824      	ldr	r0, [pc, #144]	; (8000524 <Keypad_Row_Drive+0x11c>)
 8000494:	f001 fa48 	bl	8001928 <HAL_GPIO_WritePin>

			Keypad_drive_row_num = KEYPAD_ROW3;
 8000498:	4b20      	ldr	r3, [pc, #128]	; (800051c <Keypad_Row_Drive+0x114>)
 800049a:	2203      	movs	r2, #3
 800049c:	701a      	strb	r2, [r3, #0]
			break;
 800049e:	e03a      	b.n	8000516 <Keypad_Row_Drive+0x10e>

		case KEYPAD_ROW3 :
			Keypad_cur_row = KEYPAD_ROW3;
 80004a0:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <Keypad_Row_Drive+0x118>)
 80004a2:	2203      	movs	r2, #3
 80004a4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW1_GPIO_Port, MCU_KEYPAD_ROW1_Pin, HIGH);
 80004a6:	2201      	movs	r2, #1
 80004a8:	2140      	movs	r1, #64	; 0x40
 80004aa:	481e      	ldr	r0, [pc, #120]	; (8000524 <Keypad_Row_Drive+0x11c>)
 80004ac:	f001 fa3c 	bl	8001928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW2_GPIO_Port, MCU_KEYPAD_ROW2_Pin, HIGH);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	481b      	ldr	r0, [pc, #108]	; (8000524 <Keypad_Row_Drive+0x11c>)
 80004b6:	f001 fa37 	bl	8001928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW3_GPIO_Port, MCU_KEYPAD_ROW3_Pin, LOW);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c0:	4818      	ldr	r0, [pc, #96]	; (8000524 <Keypad_Row_Drive+0x11c>)
 80004c2:	f001 fa31 	bl	8001928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW4_GPIO_Port, MCU_KEYPAD_ROW4_Pin, HIGH);
 80004c6:	2201      	movs	r2, #1
 80004c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004cc:	4815      	ldr	r0, [pc, #84]	; (8000524 <Keypad_Row_Drive+0x11c>)
 80004ce:	f001 fa2b 	bl	8001928 <HAL_GPIO_WritePin>

			Keypad_drive_row_num = KEYPAD_ROW4;
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <Keypad_Row_Drive+0x114>)
 80004d4:	2204      	movs	r2, #4
 80004d6:	701a      	strb	r2, [r3, #0]
			break;
 80004d8:	e01d      	b.n	8000516 <Keypad_Row_Drive+0x10e>

		case KEYPAD_ROW4 :
			Keypad_cur_row = KEYPAD_ROW4;
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <Keypad_Row_Drive+0x118>)
 80004dc:	2204      	movs	r2, #4
 80004de:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW1_GPIO_Port, MCU_KEYPAD_ROW1_Pin, HIGH);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2140      	movs	r1, #64	; 0x40
 80004e4:	480f      	ldr	r0, [pc, #60]	; (8000524 <Keypad_Row_Drive+0x11c>)
 80004e6:	f001 fa1f 	bl	8001928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW2_GPIO_Port, MCU_KEYPAD_ROW2_Pin, HIGH);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	480d      	ldr	r0, [pc, #52]	; (8000524 <Keypad_Row_Drive+0x11c>)
 80004f0:	f001 fa1a 	bl	8001928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW3_GPIO_Port, MCU_KEYPAD_ROW3_Pin, HIGH);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fa:	480a      	ldr	r0, [pc, #40]	; (8000524 <Keypad_Row_Drive+0x11c>)
 80004fc:	f001 fa14 	bl	8001928 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MCU_KEYPAD_ROW4_GPIO_Port, MCU_KEYPAD_ROW4_Pin, LOW);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <Keypad_Row_Drive+0x11c>)
 8000508:	f001 fa0e 	bl	8001928 <HAL_GPIO_WritePin>

			Keypad_drive_row_num = KEYPAD_ROW1;
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <Keypad_Row_Drive+0x114>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
			break;
 8000512:	e000      	b.n	8000516 <Keypad_Row_Drive+0x10e>

		default :
			break;
 8000514:	bf00      	nop
	}
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	24000001 	.word	0x24000001
 8000520:	24000050 	.word	0x24000050
 8000524:	58020800 	.word	0x58020800

08000528 <Initialize_LCD>:


#include "LCD_Driver.h"

void Initialize_LCD(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
    // 1. Wait for 100us
    HAL_Delay(100);
 800052c:	2064      	movs	r0, #100	; 0x64
 800052e:	f000 fef3 	bl	8001318 <HAL_Delay>

    // 2. Set GPIO Pin Output of LCD to LOW
    HAL_GPIO_WritePin(MCU_CHAR_LCD_RW_GPIO_Port, MCU_CHAR_LCD_RW_Pin, LOW);		// Write mode
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000538:	4823      	ldr	r0, [pc, #140]	; (80005c8 <Initialize_LCD+0xa0>)
 800053a:	f001 f9f5 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_E_GPIO_Port, MCU_CHAR_LCD_E_Pin, LOW);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000544:	4820      	ldr	r0, [pc, #128]	; (80005c8 <Initialize_LCD+0xa0>)
 8000546:	f001 f9ef 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_RS_GPIO_Port, MCU_CHAR_LCD_RS_Pin, LOW);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000550:	481d      	ldr	r0, [pc, #116]	; (80005c8 <Initialize_LCD+0xa0>)
 8000552:	f001 f9e9 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA0_GPIO_Port, MCU_CHAR_LCD_DATA0_Pin, LOW);
 8000556:	2200      	movs	r2, #0
 8000558:	2101      	movs	r1, #1
 800055a:	481b      	ldr	r0, [pc, #108]	; (80005c8 <Initialize_LCD+0xa0>)
 800055c:	f001 f9e4 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA1_GPIO_Port, MCU_CHAR_LCD_DATA1_Pin, LOW);
 8000560:	2200      	movs	r2, #0
 8000562:	2102      	movs	r1, #2
 8000564:	4818      	ldr	r0, [pc, #96]	; (80005c8 <Initialize_LCD+0xa0>)
 8000566:	f001 f9df 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA2_GPIO_Port, MCU_CHAR_LCD_DATA2_Pin, LOW);
 800056a:	2200      	movs	r2, #0
 800056c:	2104      	movs	r1, #4
 800056e:	4816      	ldr	r0, [pc, #88]	; (80005c8 <Initialize_LCD+0xa0>)
 8000570:	f001 f9da 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA3_GPIO_Port, MCU_CHAR_LCD_DATA3_Pin, LOW);
 8000574:	2200      	movs	r2, #0
 8000576:	2108      	movs	r1, #8
 8000578:	4813      	ldr	r0, [pc, #76]	; (80005c8 <Initialize_LCD+0xa0>)
 800057a:	f001 f9d5 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA4_GPIO_Port, MCU_CHAR_LCD_DATA4_Pin, LOW);
 800057e:	2200      	movs	r2, #0
 8000580:	2110      	movs	r1, #16
 8000582:	4811      	ldr	r0, [pc, #68]	; (80005c8 <Initialize_LCD+0xa0>)
 8000584:	f001 f9d0 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA5_GPIO_Port, MCU_CHAR_LCD_DATA5_Pin, LOW);
 8000588:	2200      	movs	r2, #0
 800058a:	2120      	movs	r1, #32
 800058c:	480e      	ldr	r0, [pc, #56]	; (80005c8 <Initialize_LCD+0xa0>)
 800058e:	f001 f9cb 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA6_GPIO_Port, MCU_CHAR_LCD_DATA6_Pin, LOW);
 8000592:	2200      	movs	r2, #0
 8000594:	2140      	movs	r1, #64	; 0x40
 8000596:	480c      	ldr	r0, [pc, #48]	; (80005c8 <Initialize_LCD+0xa0>)
 8000598:	f001 f9c6 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA7_GPIO_Port, MCU_CHAR_LCD_DATA7_Pin, LOW);
 800059c:	2200      	movs	r2, #0
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <Initialize_LCD+0xa0>)
 80005a2:	f001 f9c1 	bl	8001928 <HAL_GPIO_WritePin>

    // 3. Function Set (8bit, 2 Line, 5x7 dot)
    LCD_Command(0x38);
 80005a6:	2038      	movs	r0, #56	; 0x38
 80005a8:	f000 f810 	bl	80005cc <LCD_Command>

    // 4. Display Control (Display ON, Cursor OFF)
    LCD_Command(0x0C);
 80005ac:	200c      	movs	r0, #12
 80005ae:	f000 f80d 	bl	80005cc <LCD_Command>

    // 5. Entry Mode Set (Increment, Not Shift)
    LCD_Command(0x06);
 80005b2:	2006      	movs	r0, #6
 80005b4:	f000 f80a 	bl	80005cc <LCD_Command>

    // 6. Clear Display
    LCD_Command(0x01);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f000 f807 	bl	80005cc <LCD_Command>
    HAL_Delay(2);
 80005be:	2002      	movs	r0, #2
 80005c0:	f000 feaa 	bl	8001318 <HAL_Delay>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	58020c00 	.word	0x58020c00

080005cc <LCD_Command>:

void LCD_Command(uint8_t command)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
    // 1. E = 0, RS = 0
    HAL_GPIO_WritePin(MCU_CHAR_LCD_E_GPIO_Port, MCU_CHAR_LCD_E_Pin, LOW);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005dc:	483b      	ldr	r0, [pc, #236]	; (80006cc <LCD_Command+0x100>)
 80005de:	f001 f9a3 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_RS_GPIO_Port, MCU_CHAR_LCD_RS_Pin, LOW);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	4838      	ldr	r0, [pc, #224]	; (80006cc <LCD_Command+0x100>)
 80005ea:	f001 f99d 	bl	8001928 <HAL_GPIO_WritePin>
    Delay_us(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 fb80 	bl	8000cf4 <Delay_us>

    // 2. Write Command
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA0_GPIO_Port, MCU_CHAR_LCD_DATA0_Pin, (command & 0x01));
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	461a      	mov	r2, r3
 80005fe:	2101      	movs	r1, #1
 8000600:	4832      	ldr	r0, [pc, #200]	; (80006cc <LCD_Command+0x100>)
 8000602:	f001 f991 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA1_GPIO_Port, MCU_CHAR_LCD_DATA1_Pin, ((command >> 1) & 0x01));
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	085b      	lsrs	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	461a      	mov	r2, r3
 8000614:	2102      	movs	r1, #2
 8000616:	482d      	ldr	r0, [pc, #180]	; (80006cc <LCD_Command+0x100>)
 8000618:	f001 f986 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA2_GPIO_Port, MCU_CHAR_LCD_DATA2_Pin, ((command >> 2) & 0x01));
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	089b      	lsrs	r3, r3, #2
 8000620:	b2db      	uxtb	r3, r3
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	b2db      	uxtb	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	2104      	movs	r1, #4
 800062c:	4827      	ldr	r0, [pc, #156]	; (80006cc <LCD_Command+0x100>)
 800062e:	f001 f97b 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA3_GPIO_Port, MCU_CHAR_LCD_DATA3_Pin, ((command >> 3) & 0x01));
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	08db      	lsrs	r3, r3, #3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	461a      	mov	r2, r3
 8000640:	2108      	movs	r1, #8
 8000642:	4822      	ldr	r0, [pc, #136]	; (80006cc <LCD_Command+0x100>)
 8000644:	f001 f970 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA4_GPIO_Port, MCU_CHAR_LCD_DATA4_Pin, ((command >> 4) & 0x01));
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	091b      	lsrs	r3, r3, #4
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	2110      	movs	r1, #16
 8000658:	481c      	ldr	r0, [pc, #112]	; (80006cc <LCD_Command+0x100>)
 800065a:	f001 f965 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA5_GPIO_Port, MCU_CHAR_LCD_DATA5_Pin, ((command >> 5) & 0x01));
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	095b      	lsrs	r3, r3, #5
 8000662:	b2db      	uxtb	r3, r3
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	b2db      	uxtb	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	2120      	movs	r1, #32
 800066e:	4817      	ldr	r0, [pc, #92]	; (80006cc <LCD_Command+0x100>)
 8000670:	f001 f95a 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA6_GPIO_Port, MCU_CHAR_LCD_DATA6_Pin, ((command >> 6) & 0x01));
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	099b      	lsrs	r3, r3, #6
 8000678:	b2db      	uxtb	r3, r3
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	461a      	mov	r2, r3
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	4811      	ldr	r0, [pc, #68]	; (80006cc <LCD_Command+0x100>)
 8000686:	f001 f94f 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA7_GPIO_Port, MCU_CHAR_LCD_DATA7_Pin, ((command >> 7) & 0x01));
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	09db      	lsrs	r3, r3, #7
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	2180      	movs	r1, #128	; 0x80
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <LCD_Command+0x100>)
 8000696:	f001 f947 	bl	8001928 <HAL_GPIO_WritePin>
    Delay_us(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f000 fb2a 	bl	8000cf4 <Delay_us>

    // 3. E = 1
    HAL_GPIO_WritePin(MCU_CHAR_LCD_E_GPIO_Port, MCU_CHAR_LCD_E_Pin, HIGH);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a6:	4809      	ldr	r0, [pc, #36]	; (80006cc <LCD_Command+0x100>)
 80006a8:	f001 f93e 	bl	8001928 <HAL_GPIO_WritePin>

    // 4. Wait for 1us
    Delay_us(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 fb21 	bl	8000cf4 <Delay_us>

    // 5. E = 0
    HAL_GPIO_WritePin(MCU_CHAR_LCD_E_GPIO_Port, MCU_CHAR_LCD_E_Pin, LOW);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <LCD_Command+0x100>)
 80006ba:	f001 f935 	bl	8001928 <HAL_GPIO_WritePin>

    // 6. Wait for 50us
    Delay_us(50);
 80006be:	2032      	movs	r0, #50	; 0x32
 80006c0:	f000 fb18 	bl	8000cf4 <Delay_us>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	58020c00 	.word	0x58020c00

080006d0 <LCD_Data>:


void LCD_Data(uint8_t data)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
    // 1. E = 0, RS = 1
    HAL_GPIO_WritePin(MCU_CHAR_LCD_E_GPIO_Port, MCU_CHAR_LCD_E_Pin, LOW);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e0:	483b      	ldr	r0, [pc, #236]	; (80007d0 <LCD_Data+0x100>)
 80006e2:	f001 f921 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_RS_GPIO_Port, MCU_CHAR_LCD_RS_Pin, HIGH);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ec:	4838      	ldr	r0, [pc, #224]	; (80007d0 <LCD_Data+0x100>)
 80006ee:	f001 f91b 	bl	8001928 <HAL_GPIO_WritePin>
    Delay_us(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f000 fafe 	bl	8000cf4 <Delay_us>

    // 2. Write Command
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA0_GPIO_Port, MCU_CHAR_LCD_DATA0_Pin, (data & 0x01));
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	2101      	movs	r1, #1
 8000704:	4832      	ldr	r0, [pc, #200]	; (80007d0 <LCD_Data+0x100>)
 8000706:	f001 f90f 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA1_GPIO_Port, MCU_CHAR_LCD_DATA1_Pin, ((data >> 1) & 0x01));
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	085b      	lsrs	r3, r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	2102      	movs	r1, #2
 800071a:	482d      	ldr	r0, [pc, #180]	; (80007d0 <LCD_Data+0x100>)
 800071c:	f001 f904 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA2_GPIO_Port, MCU_CHAR_LCD_DATA2_Pin, ((data >> 2) & 0x01));
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	089b      	lsrs	r3, r3, #2
 8000724:	b2db      	uxtb	r3, r3
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	461a      	mov	r2, r3
 800072e:	2104      	movs	r1, #4
 8000730:	4827      	ldr	r0, [pc, #156]	; (80007d0 <LCD_Data+0x100>)
 8000732:	f001 f8f9 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA3_GPIO_Port, MCU_CHAR_LCD_DATA3_Pin, ((data >> 3) & 0x01));
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	b2db      	uxtb	r3, r3
 8000742:	461a      	mov	r2, r3
 8000744:	2108      	movs	r1, #8
 8000746:	4822      	ldr	r0, [pc, #136]	; (80007d0 <LCD_Data+0x100>)
 8000748:	f001 f8ee 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA4_GPIO_Port, MCU_CHAR_LCD_DATA4_Pin, ((data >> 4) & 0x01));
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	091b      	lsrs	r3, r3, #4
 8000750:	b2db      	uxtb	r3, r3
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	b2db      	uxtb	r3, r3
 8000758:	461a      	mov	r2, r3
 800075a:	2110      	movs	r1, #16
 800075c:	481c      	ldr	r0, [pc, #112]	; (80007d0 <LCD_Data+0x100>)
 800075e:	f001 f8e3 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA5_GPIO_Port, MCU_CHAR_LCD_DATA5_Pin, ((data >> 5) & 0x01));
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	095b      	lsrs	r3, r3, #5
 8000766:	b2db      	uxtb	r3, r3
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	b2db      	uxtb	r3, r3
 800076e:	461a      	mov	r2, r3
 8000770:	2120      	movs	r1, #32
 8000772:	4817      	ldr	r0, [pc, #92]	; (80007d0 <LCD_Data+0x100>)
 8000774:	f001 f8d8 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA6_GPIO_Port, MCU_CHAR_LCD_DATA6_Pin, ((data >> 6) & 0x01));
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	099b      	lsrs	r3, r3, #6
 800077c:	b2db      	uxtb	r3, r3
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	b2db      	uxtb	r3, r3
 8000784:	461a      	mov	r2, r3
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	4811      	ldr	r0, [pc, #68]	; (80007d0 <LCD_Data+0x100>)
 800078a:	f001 f8cd 	bl	8001928 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_CHAR_LCD_DATA7_GPIO_Port, MCU_CHAR_LCD_DATA7_Pin, ((data >> 7) & 0x01));
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	09db      	lsrs	r3, r3, #7
 8000792:	b2db      	uxtb	r3, r3
 8000794:	461a      	mov	r2, r3
 8000796:	2180      	movs	r1, #128	; 0x80
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <LCD_Data+0x100>)
 800079a:	f001 f8c5 	bl	8001928 <HAL_GPIO_WritePin>
    Delay_us(1);
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 faa8 	bl	8000cf4 <Delay_us>

    // 3. E = 1
    HAL_GPIO_WritePin(MCU_CHAR_LCD_E_GPIO_Port, MCU_CHAR_LCD_E_Pin, HIGH);
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <LCD_Data+0x100>)
 80007ac:	f001 f8bc 	bl	8001928 <HAL_GPIO_WritePin>

    // 4. Wait for 1us
    Delay_us(1);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 fa9f 	bl	8000cf4 <Delay_us>

    // 5. E = 0
    HAL_GPIO_WritePin(MCU_CHAR_LCD_E_GPIO_Port, MCU_CHAR_LCD_E_Pin, LOW);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <LCD_Data+0x100>)
 80007be:	f001 f8b3 	bl	8001928 <HAL_GPIO_WritePin>

    // 6. Wait for 50us
    Delay_us(50);
 80007c2:	2032      	movs	r0, #50	; 0x32
 80007c4:	f000 fa96 	bl	8000cf4 <Delay_us>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	58020c00 	.word	0x58020c00

080007d4 <LCD_Cursor>:
    }
}


void LCD_Cursor(uint8_t row, uint8_t col)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	460a      	mov	r2, r1
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	4613      	mov	r3, r2
 80007e2:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;

	if(row == 1)
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d107      	bne.n	80007fa <LCD_Cursor+0x26>
	{
		temp = 0x80 + (col-1);
 80007ea:	79bb      	ldrb	r3, [r7, #6]
 80007ec:	337f      	adds	r3, #127	; 0x7f
 80007ee:	73fb      	strb	r3, [r7, #15]
		LCD_Command(temp);
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff feea 	bl	80005cc <LCD_Command>
	else if(row == 2)
	{
		temp = 0xC0 + (col-1);
		LCD_Command(temp);
	}
}
 80007f8:	e009      	b.n	800080e <LCD_Cursor+0x3a>
	else if(row == 2)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d106      	bne.n	800080e <LCD_Cursor+0x3a>
		temp = 0xC0 + (col-1);
 8000800:	79bb      	ldrb	r3, [r7, #6]
 8000802:	3b41      	subs	r3, #65	; 0x41
 8000804:	73fb      	strb	r3, [r7, #15]
		LCD_Command(temp);
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fedf 	bl	80005cc <LCD_Command>
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f000 fce9 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f85b 	bl	80008dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 f991 	bl	8000b4c <MX_GPIO_Init>
  MX_TIM1_Init();
 800082a:	f000 f905 	bl	8000a38 <MX_TIM1_Init>
  MX_TIM6_Init();
 800082e:	f000 f957 	bl	8000ae0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8000832:	4826      	ldr	r0, [pc, #152]	; (80008cc <main+0xb4>)
 8000834:	f002 f8e2 	bl	80029fc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 8000838:	4825      	ldr	r0, [pc, #148]	; (80008d0 <main+0xb8>)
 800083a:	f002 f94f 	bl	8002adc <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(MCU_KEYPAD_ROW1_GPIO_Port, MCU_KEYPAD_ROW1_Pin, LOW);
 800083e:	2200      	movs	r2, #0
 8000840:	2140      	movs	r1, #64	; 0x40
 8000842:	4824      	ldr	r0, [pc, #144]	; (80008d4 <main+0xbc>)
 8000844:	f001 f870 	bl	8001928 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8000848:	200a      	movs	r0, #10
 800084a:	f000 fd65 	bl	8001318 <HAL_Delay>
	Initialize_LCD();
 800084e:	f7ff fe6b 	bl	8000528 <Initialize_LCD>
	HAL_Delay(100);
 8000852:	2064      	movs	r0, #100	; 0x64
 8000854:	f000 fd60 	bl	8001318 <HAL_Delay>

	memset(Keypad_Data, 0x20, sizeof(Keypad_Data));
 8000858:	2220      	movs	r2, #32
 800085a:	2120      	movs	r1, #32
 800085c:	481e      	ldr	r0, [pc, #120]	; (80008d8 <main+0xc0>)
 800085e:	f002 fdd9 	bl	8003414 <memset>
//	LCD_Cursor(1,1);
//	LCD_Data(Keypad_value);
//	HAL_Delay(100);


	  for(int i = 0; i < 32; i++)
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	e02a      	b.n	80008be <main+0xa6>
	  {
		  if(i < 16)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b0f      	cmp	r3, #15
 800086c:	dc12      	bgt.n	8000894 <main+0x7c>
		  {
			  LCD_Cursor(1,i+1);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	3301      	adds	r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4619      	mov	r1, r3
 8000878:	2001      	movs	r0, #1
 800087a:	f7ff ffab 	bl	80007d4 <LCD_Cursor>
			  LCD_Data(Keypad_Data[i]);
 800087e:	4a16      	ldr	r2, [pc, #88]	; (80008d8 <main+0xc0>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff22 	bl	80006d0 <LCD_Data>
			  HAL_Delay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f000 fd43 	bl	8001318 <HAL_Delay>
 8000892:	e011      	b.n	80008b8 <main+0xa0>
		  }
		  else
		  {
			  LCD_Cursor(2,i-15);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	3b0f      	subs	r3, #15
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4619      	mov	r1, r3
 800089e:	2002      	movs	r0, #2
 80008a0:	f7ff ff98 	bl	80007d4 <LCD_Cursor>
			  LCD_Data(Keypad_Data[i]);
 80008a4:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <main+0xc0>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff0f 	bl	80006d0 <LCD_Data>
			  HAL_Delay(1);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f000 fd30 	bl	8001318 <HAL_Delay>
	  for(int i = 0; i < 32; i++)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3301      	adds	r3, #1
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b1f      	cmp	r3, #31
 80008c2:	ddd1      	ble.n	8000868 <main+0x50>
		  }
	  }

	  HAL_Delay(10);
 80008c4:	200a      	movs	r0, #10
 80008c6:	f000 fd27 	bl	8001318 <HAL_Delay>
	  for(int i = 0; i < 32; i++)
 80008ca:	e7ca      	b.n	8000862 <main+0x4a>
 80008cc:	24000054 	.word	0x24000054
 80008d0:	240000a0 	.word	0x240000a0
 80008d4:	58020800 	.word	0x58020800
 80008d8:	24000030 	.word	0x24000030

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b09e      	sub	sp, #120	; 0x78
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e6:	224c      	movs	r2, #76	; 0x4c
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 fd92 	bl	8003414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	2220      	movs	r2, #32
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fd8b 	bl	8003414 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008fe:	2002      	movs	r0, #2
 8000900:	f001 f860 	bl	80019c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	4b48      	ldr	r3, [pc, #288]	; (8000a2c <SystemClock_Config+0x150>)
 800090a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090c:	4a47      	ldr	r2, [pc, #284]	; (8000a2c <SystemClock_Config+0x150>)
 800090e:	f023 0301 	bic.w	r3, r3, #1
 8000912:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000914:	4b45      	ldr	r3, [pc, #276]	; (8000a2c <SystemClock_Config+0x150>)
 8000916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b44      	ldr	r3, [pc, #272]	; (8000a30 <SystemClock_Config+0x154>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	4a43      	ldr	r2, [pc, #268]	; (8000a30 <SystemClock_Config+0x154>)
 8000924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000928:	6193      	str	r3, [r2, #24]
 800092a:	4b41      	ldr	r3, [pc, #260]	; (8000a30 <SystemClock_Config+0x154>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000936:	bf00      	nop
 8000938:	4b3d      	ldr	r3, [pc, #244]	; (8000a30 <SystemClock_Config+0x154>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000944:	d1f8      	bne.n	8000938 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <SystemClock_Config+0x158>)
 8000948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800094c:	4a39      	ldr	r2, [pc, #228]	; (8000a34 <SystemClock_Config+0x158>)
 800094e:	f043 0302 	orr.w	r3, r3, #2
 8000952:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000956:	4b37      	ldr	r3, [pc, #220]	; (8000a34 <SystemClock_Config+0x158>)
 8000958:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800095c:	f003 0302 	and.w	r3, r3, #2
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000964:	2300      	movs	r3, #0
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <SystemClock_Config+0x154>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a30      	ldr	r2, [pc, #192]	; (8000a30 <SystemClock_Config+0x154>)
 800096e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <SystemClock_Config+0x154>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <SystemClock_Config+0x150>)
 8000980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000982:	4a2a      	ldr	r2, [pc, #168]	; (8000a2c <SystemClock_Config+0x150>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	62d3      	str	r3, [r2, #44]	; 0x2c
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <SystemClock_Config+0x150>)
 800098c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000996:	bf00      	nop
 8000998:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <SystemClock_Config+0x154>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a4:	d1f8      	bne.n	8000998 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a6:	2301      	movs	r3, #1
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009aa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b0:	2302      	movs	r3, #2
 80009b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b4:	2302      	movs	r3, #2
 80009b6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80009bc:	2350      	movs	r3, #80	; 0x50
 80009be:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009cc:	230c      	movs	r3, #12
 80009ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 f82b 	bl	8001a38 <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x110>
  {
    Error_Handler();
 80009e8:	f000 f99e 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ec:	233f      	movs	r3, #63	; 0x3f
 80009ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f0:	2303      	movs	r3, #3
 80009f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009f8:	2308      	movs	r3, #8
 80009fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009fc:	2340      	movs	r3, #64	; 0x40
 80009fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a00:	2340      	movs	r3, #64	; 0x40
 8000a02:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a0a:	2340      	movs	r3, #64	; 0x40
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	2104      	movs	r1, #4
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fc69 	bl	80022ec <HAL_RCC_ClockConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000a20:	f000 f982 	bl	8000d28 <Error_Handler>
  }
}
 8000a24:	bf00      	nop
 8000a26:	3778      	adds	r7, #120	; 0x78
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	58000400 	.word	0x58000400
 8000a30:	58024800 	.word	0x58024800
 8000a34:	58024400 	.word	0x58024400

08000a38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <MX_TIM1_Init+0xa0>)
 8000a58:	4a20      	ldr	r2, [pc, #128]	; (8000adc <MX_TIM1_Init+0xa4>)
 8000a5a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (240-1);
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_TIM1_Init+0xa0>)
 8000a5e:	22ef      	movs	r2, #239	; 0xef
 8000a60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <MX_TIM1_Init+0xa0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_TIM1_Init+0xa0>)
 8000a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_TIM1_Init+0xa0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_TIM1_Init+0xa0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_TIM1_Init+0xa0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a82:	4815      	ldr	r0, [pc, #84]	; (8000ad8 <MX_TIM1_Init+0xa0>)
 8000a84:	f001 ff62 	bl	800294c <HAL_TIM_Base_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a8e:	f000 f94b 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480e      	ldr	r0, [pc, #56]	; (8000ad8 <MX_TIM1_Init+0xa0>)
 8000aa0:	f002 f9b4 	bl	8002e0c <HAL_TIM_ConfigClockSource>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000aaa:	f000 f93d 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <MX_TIM1_Init+0xa0>)
 8000ac0:	f002 fbfc 	bl	80032bc <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000aca:	f000 f92d 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	3720      	adds	r7, #32
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	24000054 	.word	0x24000054
 8000adc:	40010000 	.word	0x40010000

08000ae0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_TIM6_Init+0x64>)
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <MX_TIM6_Init+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (120-1);
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_TIM6_Init+0x64>)
 8000af8:	2277      	movs	r2, #119	; 0x77
 8000afa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_TIM6_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = (10000-1);
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_TIM6_Init+0x64>)
 8000b04:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b08:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_TIM6_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_TIM6_Init+0x64>)
 8000b12:	f001 ff1b 	bl	800294c <HAL_TIM_Base_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b1c:	f000 f904 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_TIM6_Init+0x64>)
 8000b2e:	f002 fbc5 	bl	80032bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b38:	f000 f8f6 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	240000a0 	.word	0x240000a0
 8000b48:	40001000 	.word	0x40001000

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	4b60      	ldr	r3, [pc, #384]	; (8000ce4 <MX_GPIO_Init+0x198>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	4a5e      	ldr	r2, [pc, #376]	; (8000ce4 <MX_GPIO_Init+0x198>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b72:	4b5c      	ldr	r3, [pc, #368]	; (8000ce4 <MX_GPIO_Init+0x198>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b80:	4b58      	ldr	r3, [pc, #352]	; (8000ce4 <MX_GPIO_Init+0x198>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b86:	4a57      	ldr	r2, [pc, #348]	; (8000ce4 <MX_GPIO_Init+0x198>)
 8000b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b90:	4b54      	ldr	r3, [pc, #336]	; (8000ce4 <MX_GPIO_Init+0x198>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	4b51      	ldr	r3, [pc, #324]	; (8000ce4 <MX_GPIO_Init+0x198>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	4a4f      	ldr	r2, [pc, #316]	; (8000ce4 <MX_GPIO_Init+0x198>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bae:	4b4d      	ldr	r3, [pc, #308]	; (8000ce4 <MX_GPIO_Init+0x198>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbc:	4b49      	ldr	r3, [pc, #292]	; (8000ce4 <MX_GPIO_Init+0x198>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc2:	4a48      	ldr	r2, [pc, #288]	; (8000ce4 <MX_GPIO_Init+0x198>)
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bcc:	4b45      	ldr	r3, [pc, #276]	; (8000ce4 <MX_GPIO_Init+0x198>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b42      	ldr	r3, [pc, #264]	; (8000ce4 <MX_GPIO_Init+0x198>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4a40      	ldr	r2, [pc, #256]	; (8000ce4 <MX_GPIO_Init+0x198>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4b3e      	ldr	r3, [pc, #248]	; (8000ce4 <MX_GPIO_Init+0x198>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED1_BLUE_Pin|MCU_LED1_GREEN_Pin|MCU_LED2_RED_Pin|MCU_LED1_RED_Pin
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f241 3115 	movw	r1, #4885	; 0x1315
 8000bfe:	483a      	ldr	r0, [pc, #232]	; (8000ce8 <MX_GPIO_Init+0x19c>)
 8000c00:	f000 fe92 	bl	8001928 <HAL_GPIO_WritePin>
                          |MCU_LED2_BLUE_Pin|MCU_LED2_GREEN_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MCU_CHAR_LCD_RS_Pin|MCU_CHAR_LCD_RW_Pin|MCU_CHAR_LCD_E_Pin|MCU_CHAR_LCD_DATA0_Pin
 8000c04:	2200      	movs	r2, #0
 8000c06:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000c0a:	4838      	ldr	r0, [pc, #224]	; (8000cec <MX_GPIO_Init+0x1a0>)
 8000c0c:	f000 fe8c 	bl	8001928 <HAL_GPIO_WritePin>
                          |MCU_CHAR_LCD_DATA1_Pin|MCU_CHAR_LCD_DATA2_Pin|MCU_CHAR_LCD_DATA3_Pin|MCU_CHAR_LCD_DATA4_Pin
                          |MCU_CHAR_LCD_DATA5_Pin|MCU_CHAR_LCD_DATA6_Pin|MCU_CHAR_LCD_DATA7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCU_KEYPAD_ROW1_Pin|MCU_KEYPAD_ROW2_Pin|MCU_KEYPAD_ROW3_Pin|MCU_KEYPAD_ROW4_Pin, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000c16:	4836      	ldr	r0, [pc, #216]	; (8000cf0 <MX_GPIO_Init+0x1a4>)
 8000c18:	f000 fe86 	bl	8001928 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_TACT_SW1_Pin MCU_TACT_SW2_Pin */
  GPIO_InitStruct.Pin = MCU_TACT_SW1_Pin|MCU_TACT_SW2_Pin;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c20:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	482f      	ldr	r0, [pc, #188]	; (8000cf0 <MX_GPIO_Init+0x1a4>)
 8000c32:	f000 fcb1 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED1_BLUE_Pin MCU_LED1_GREEN_Pin MCU_LED2_RED_Pin MCU_LED1_RED_Pin
                           MCU_LED2_BLUE_Pin MCU_LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = MCU_LED1_BLUE_Pin|MCU_LED1_GREEN_Pin|MCU_LED2_RED_Pin|MCU_LED1_RED_Pin
 8000c36:	f241 3315 	movw	r3, #4885	; 0x1315
 8000c3a:	617b      	str	r3, [r7, #20]
                          |MCU_LED2_BLUE_Pin|MCU_LED2_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4826      	ldr	r0, [pc, #152]	; (8000ce8 <MX_GPIO_Init+0x19c>)
 8000c50:	f000 fca2 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_CHAR_LCD_RS_Pin MCU_CHAR_LCD_RW_Pin MCU_CHAR_LCD_E_Pin MCU_CHAR_LCD_DATA0_Pin
                           MCU_CHAR_LCD_DATA1_Pin MCU_CHAR_LCD_DATA2_Pin MCU_CHAR_LCD_DATA3_Pin MCU_CHAR_LCD_DATA4_Pin
                           MCU_CHAR_LCD_DATA5_Pin MCU_CHAR_LCD_DATA6_Pin MCU_CHAR_LCD_DATA7_Pin */
  GPIO_InitStruct.Pin = MCU_CHAR_LCD_RS_Pin|MCU_CHAR_LCD_RW_Pin|MCU_CHAR_LCD_E_Pin|MCU_CHAR_LCD_DATA0_Pin
 8000c54:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c58:	617b      	str	r3, [r7, #20]
                          |MCU_CHAR_LCD_DATA1_Pin|MCU_CHAR_LCD_DATA2_Pin|MCU_CHAR_LCD_DATA3_Pin|MCU_CHAR_LCD_DATA4_Pin
                          |MCU_CHAR_LCD_DATA5_Pin|MCU_CHAR_LCD_DATA6_Pin|MCU_CHAR_LCD_DATA7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	481f      	ldr	r0, [pc, #124]	; (8000cec <MX_GPIO_Init+0x1a0>)
 8000c6e:	f000 fc93 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_KEYPAD_ROW1_Pin MCU_KEYPAD_ROW2_Pin MCU_KEYPAD_ROW3_Pin MCU_KEYPAD_ROW4_Pin */
  GPIO_InitStruct.Pin = MCU_KEYPAD_ROW1_Pin|MCU_KEYPAD_ROW2_Pin|MCU_KEYPAD_ROW3_Pin|MCU_KEYPAD_ROW4_Pin;
 8000c72:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4819      	ldr	r0, [pc, #100]	; (8000cf0 <MX_GPIO_Init+0x1a4>)
 8000c8c:	f000 fc84 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_KEYPAD_COL1_Pin MCU_KEYPAD_COL2_Pin MCU_KEYPAD_COL3_Pin */
  GPIO_InitStruct.Pin = MCU_KEYPAD_COL1_Pin|MCU_KEYPAD_COL2_Pin|MCU_KEYPAD_COL3_Pin;
 8000c90:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4812      	ldr	r0, [pc, #72]	; (8000cf0 <MX_GPIO_Init+0x1a4>)
 8000ca8:	f000 fc76 	bl	8001598 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2006      	movs	r0, #6
 8000cb2:	f000 fc3c 	bl	800152e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cb6:	2006      	movs	r0, #6
 8000cb8:	f000 fc53 	bl	8001562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2007      	movs	r0, #7
 8000cc2:	f000 fc34 	bl	800152e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000cc6:	2007      	movs	r0, #7
 8000cc8:	f000 fc4b 	bl	8001562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2028      	movs	r0, #40	; 0x28
 8000cd2:	f000 fc2c 	bl	800152e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cd6:	2028      	movs	r0, #40	; 0x28
 8000cd8:	f000 fc43 	bl	8001562 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	; 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58024400 	.word	0x58024400
 8000ce8:	58020400 	.word	0x58020400
 8000cec:	58020c00 	.word	0x58020c00
 8000cf0:	58020800 	.word	0x58020800

08000cf4 <Delay_us>:

/* USER CODE BEGIN 4 */
void Delay_us(uint16_t time_us)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <Delay_us+0x30>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1))<time_us);
 8000d06:	bf00      	nop
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <Delay_us+0x30>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3f9      	bcc.n	8000d08 <Delay_us+0x14>
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	24000054 	.word	0x24000054

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <Error_Handler+0x8>
	...

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_MspInit+0x30>)
 8000d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d40:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_MspInit+0x30>)
 8000d42:	f043 0302 	orr.w	r3, r3, #2
 8000d46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_MspInit+0x30>)
 8000d4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	58024400 	.word	0x58024400

08000d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_TIM_Base_MspInit+0x74>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d10f      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_TIM_Base_MspInit+0x78>)
 8000d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_TIM_Base_MspInit+0x78>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_TIM_Base_MspInit+0x78>)
 8000d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d98:	e01b      	b.n	8000dd2 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM6)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <HAL_TIM_Base_MspInit+0x7c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d116      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_TIM_Base_MspInit+0x78>)
 8000da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000daa:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <HAL_TIM_Base_MspInit+0x78>)
 8000dac:	f043 0310 	orr.w	r3, r3, #16
 8000db0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_TIM_Base_MspInit+0x78>)
 8000db6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dba:	f003 0310 	and.w	r3, r3, #16
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2036      	movs	r0, #54	; 0x36
 8000dc8:	f000 fbb1 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dcc:	2036      	movs	r0, #54	; 0x36
 8000dce:	f000 fbc8 	bl	8001562 <HAL_NVIC_EnableIRQ>
}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40010000 	.word	0x40010000
 8000de0:	58024400 	.word	0x58024400
 8000de4:	40001000 	.word	0x40001000

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dec:	e7fe      	b.n	8000dec <NMI_Handler+0x4>

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 fa50 	bl	80012d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCU_TACT_SW1_Pin);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f000 fda4 	bl	800198e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCU_TACT_SW2_Pin);
 8000e4e:	2002      	movs	r0, #2
 8000e50:	f000 fd9d 	bl	800198e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCU_KEYPAD_COL1_Pin);
 8000e5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e60:	f000 fd95 	bl	800198e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MCU_KEYPAD_COL2_Pin);
 8000e64:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e68:	f000 fd91 	bl	800198e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MCU_KEYPAD_COL3_Pin);
 8000e6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e70:	f000 fd8d 	bl	800198e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <TIM6_DAC_IRQHandler+0x10>)
 8000e7e:	f001 fea5 	bl	8002bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	240000a0 	.word	0x240000a0

08000e8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MCU_TACT_SW1_Pin)
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d108      	bne.n	8000eae <HAL_GPIO_EXTI_Callback+0x22>
	{
		HAL_GPIO_TogglePin(MCU_LED1_RED_GPIO_Port, MCU_LED1_RED_Pin);
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	4830      	ldr	r0, [pc, #192]	; (8000f60 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000ea0:	f000 fd5b 	bl	800195a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(MCU_LED1_GREEN_GPIO_Port, MCU_LED1_GREEN_Pin);
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	482e      	ldr	r0, [pc, #184]	; (8000f60 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000ea8:	f000 fd57 	bl	800195a <HAL_GPIO_TogglePin>
 8000eac:	e00c      	b.n	8000ec8 <HAL_GPIO_EXTI_Callback+0x3c>
	}
	else if(GPIO_Pin == MCU_TACT_SW2_Pin)
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d109      	bne.n	8000ec8 <HAL_GPIO_EXTI_Callback+0x3c>
	{
		HAL_GPIO_TogglePin(MCU_LED2_RED_GPIO_Port, MCU_LED2_RED_Pin);
 8000eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb8:	4829      	ldr	r0, [pc, #164]	; (8000f60 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000eba:	f000 fd4e 	bl	800195a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(MCU_LED2_GREEN_GPIO_Port, MCU_LED2_GREEN_Pin);
 8000ebe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec2:	4827      	ldr	r0, [pc, #156]	; (8000f60 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000ec4:	f000 fd49 	bl	800195a <HAL_GPIO_TogglePin>
	}

	if((GPIO_Pin == MCU_KEYPAD_COL1_Pin) || (GPIO_Pin == MCU_KEYPAD_COL2_Pin) || (GPIO_Pin == MCU_KEYPAD_COL3_Pin))
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ece:	d007      	beq.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x54>
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x54>
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ede:	d13a      	bne.n	8000f56 <HAL_GPIO_EXTI_Callback+0xca>
	{
		if(GPIO_Pin == MCU_KEYPAD_COL1_Pin)
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee6:	d10f      	bne.n	8000f08 <HAL_GPIO_EXTI_Callback+0x7c>
		{
			Keypad_cur_col = KEYPAD_COL1;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
			Keypad_value = Keypad_Get_Value(Keypad_cur_row, Keypad_cur_col);
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000ef4:	7812      	ldrb	r2, [r2, #0]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff f9ed 	bl	80002d8 <Keypad_Get_Value>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <HAL_GPIO_EXTI_Callback+0xe0>)
 8000f04:	701a      	strb	r2, [r3, #0]
		{
			Keypad_cur_col = KEYPAD_COL3;
			Keypad_value = Keypad_Get_Value(Keypad_cur_row, Keypad_cur_col);
		}
	}
}
 8000f06:	e026      	b.n	8000f56 <HAL_GPIO_EXTI_Callback+0xca>
		else if(GPIO_Pin == MCU_KEYPAD_COL2_Pin)
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f0e:	d10f      	bne.n	8000f30 <HAL_GPIO_EXTI_Callback+0xa4>
			Keypad_cur_col = KEYPAD_COL2;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000f12:	2202      	movs	r2, #2
 8000f14:	701a      	strb	r2, [r3, #0]
			Keypad_value = Keypad_Get_Value(Keypad_cur_row, Keypad_cur_col);
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff f9d9 	bl	80002d8 <Keypad_Get_Value>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_GPIO_EXTI_Callback+0xe0>)
 8000f2c:	701a      	strb	r2, [r3, #0]
}
 8000f2e:	e012      	b.n	8000f56 <HAL_GPIO_EXTI_Callback+0xca>
		else if(GPIO_Pin == MCU_KEYPAD_COL3_Pin)
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f36:	d10e      	bne.n	8000f56 <HAL_GPIO_EXTI_Callback+0xca>
			Keypad_cur_col = KEYPAD_COL3;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	701a      	strb	r2, [r3, #0]
			Keypad_value = Keypad_Get_Value(Keypad_cur_row, Keypad_cur_col);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff f9c5 	bl	80002d8 <Keypad_Get_Value>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_GPIO_EXTI_Callback+0xe0>)
 8000f54:	701a      	strb	r2, [r3, #0]
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	58020400 	.word	0x58020400
 8000f64:	24000051 	.word	0x24000051
 8000f68:	24000050 	.word	0x24000050
 8000f6c:	24000000 	.word	0x24000000

08000f70 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	static uint8_t TIM6_state = 1;
	static uint16_t TIM6_time_cnt = 0;

	if(htim->Instance == TIM6)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a3f      	ldr	r2, [pc, #252]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d177      	bne.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x102>
	{
		// TIM6 Interrupt is called every 10ms
		switch(TIM6_state)
 8000f82:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d86f      	bhi.n	800106c <HAL_TIM_PeriodElapsedCallback+0xfc>
 8000f8c:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f92:	bf00      	nop
 8000f94:	08000fa5 	.word	0x08000fa5
 8000f98:	08000fe3 	.word	0x08000fe3
 8000f9c:	08001011 	.word	0x08001011
 8000fa0:	08001049 	.word	0x08001049
		{
			case 1 :
						if((HAL_GPIO_ReadPin(MCU_KEYPAD_COL1_GPIO_Port, MCU_KEYPAD_COL1_Pin) == KEY_PRESSED) ||
 8000fa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa8:	4836      	ldr	r0, [pc, #216]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000faa:	f000 fca5 	bl	80018f8 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00f      	beq.n	8000fd4 <HAL_TIM_PeriodElapsedCallback+0x64>
						(HAL_GPIO_ReadPin(MCU_KEYPAD_COL2_GPIO_Port, MCU_KEYPAD_COL2_Pin) == KEY_PRESSED) ||
 8000fb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb8:	4832      	ldr	r0, [pc, #200]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000fba:	f000 fc9d 	bl	80018f8 <HAL_GPIO_ReadPin>
 8000fbe:	4603      	mov	r3, r0
						if((HAL_GPIO_ReadPin(MCU_KEYPAD_COL1_GPIO_Port, MCU_KEYPAD_COL1_Pin) == KEY_PRESSED) ||
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d007      	beq.n	8000fd4 <HAL_TIM_PeriodElapsedCallback+0x64>
						(HAL_GPIO_ReadPin(MCU_KEYPAD_COL3_GPIO_Port, MCU_KEYPAD_COL3_Pin) == KEY_PRESSED))
 8000fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc8:	482e      	ldr	r0, [pc, #184]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000fca:	f000 fc95 	bl	80018f8 <HAL_GPIO_ReadPin>
 8000fce:	4603      	mov	r3, r0
						(HAL_GPIO_ReadPin(MCU_KEYPAD_COL2_GPIO_Port, MCU_KEYPAD_COL2_Pin) == KEY_PRESSED) ||
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d103      	bne.n	8000fdc <HAL_TIM_PeriodElapsedCallback+0x6c>
						{
							TIM6_state = 2;
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	701a      	strb	r2, [r3, #0]
						else
						{
							Keypad_Row_Drive();
						}

						break;
 8000fda:	e04a      	b.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x102>
							Keypad_Row_Drive();
 8000fdc:	f7ff fa14 	bl	8000408 <Keypad_Row_Drive>
						break;
 8000fe0:	e047      	b.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x102>

			case 2 :
						if(TIM6_time_cnt < 200)
 8000fe2:	4b29      	ldr	r3, [pc, #164]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	2bc7      	cmp	r3, #199	; 0xc7
 8000fe8:	d806      	bhi.n	8000ff8 <HAL_TIM_PeriodElapsedCallback+0x88>
						{
							TIM6_time_cnt += 10;
 8000fea:	4b27      	ldr	r3, [pc, #156]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	330a      	adds	r3, #10
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000ff4:	801a      	strh	r2, [r3, #0]
							Keypad_Save_Value(Keypad_value);

							TIM6_state = 3;
						}

						break;
 8000ff6:	e03c      	b.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x102>
							TIM6_time_cnt = 0;
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	801a      	strh	r2, [r3, #0]
							Keypad_Save_Value(Keypad_value);
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff f9da 	bl	80003bc <Keypad_Save_Value>
							TIM6_state = 3;
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800100a:	2203      	movs	r2, #3
 800100c:	701a      	strb	r2, [r3, #0]
						break;
 800100e:	e030      	b.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x102>

			case 3 :
						if((HAL_GPIO_ReadPin(MCU_KEYPAD_COL1_GPIO_Port, MCU_KEYPAD_COL1_Pin) == KEY_RELEASED) ||
 8001010:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001014:	481b      	ldr	r0, [pc, #108]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001016:	f000 fc6f 	bl	80018f8 <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	2b01      	cmp	r3, #1
 800101e:	d00f      	beq.n	8001040 <HAL_TIM_PeriodElapsedCallback+0xd0>
						(HAL_GPIO_ReadPin(MCU_KEYPAD_COL2_GPIO_Port, MCU_KEYPAD_COL2_Pin) == KEY_RELEASED) ||
 8001020:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001024:	4817      	ldr	r0, [pc, #92]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001026:	f000 fc67 	bl	80018f8 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
						if((HAL_GPIO_ReadPin(MCU_KEYPAD_COL1_GPIO_Port, MCU_KEYPAD_COL1_Pin) == KEY_RELEASED) ||
 800102c:	2b01      	cmp	r3, #1
 800102e:	d007      	beq.n	8001040 <HAL_TIM_PeriodElapsedCallback+0xd0>
						(HAL_GPIO_ReadPin(MCU_KEYPAD_COL3_GPIO_Port, MCU_KEYPAD_COL3_Pin) == KEY_RELEASED))
 8001030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001034:	4813      	ldr	r0, [pc, #76]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001036:	f000 fc5f 	bl	80018f8 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
						(HAL_GPIO_ReadPin(MCU_KEYPAD_COL2_GPIO_Port, MCU_KEYPAD_COL2_Pin) == KEY_RELEASED) ||
 800103c:	2b01      	cmp	r3, #1
 800103e:	d117      	bne.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x100>
						{
							TIM6_state = 4;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001042:	2204      	movs	r2, #4
 8001044:	701a      	strb	r2, [r3, #0]
						}

						break;
 8001046:	e013      	b.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x100>

			case 4 :
						if(TIM6_time_cnt < 200)
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	2bc7      	cmp	r3, #199	; 0xc7
 800104e:	d806      	bhi.n	800105e <HAL_TIM_PeriodElapsedCallback+0xee>
						{
							TIM6_time_cnt += 10;
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	330a      	adds	r3, #10
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800105a:	801a      	strh	r2, [r3, #0]
						{
							TIM6_time_cnt = 0;
							TIM6_state = 1;
						}

						break;
 800105c:	e009      	b.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x102>
							TIM6_time_cnt = 0;
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001060:	2200      	movs	r2, #0
 8001062:	801a      	strh	r2, [r3, #0]
							TIM6_state = 1;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
						break;
 800106a:	e002      	b.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x102>

			default :

						break;
 800106c:	bf00      	nop
 800106e:	e000      	b.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x102>
						break;
 8001070:	bf00      	nop
		}
	}
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40001000 	.word	0x40001000
 8001080:	24000002 	.word	0x24000002
 8001084:	58020800 	.word	0x58020800
 8001088:	240000ec 	.word	0x240000ec
 800108c:	24000000 	.word	0x24000000

08001090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001094:	4b37      	ldr	r3, [pc, #220]	; (8001174 <SystemInit+0xe4>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109a:	4a36      	ldr	r2, [pc, #216]	; (8001174 <SystemInit+0xe4>)
 800109c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010a4:	4b34      	ldr	r3, [pc, #208]	; (8001178 <SystemInit+0xe8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 030f 	and.w	r3, r3, #15
 80010ac:	2b06      	cmp	r3, #6
 80010ae:	d807      	bhi.n	80010c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010b0:	4b31      	ldr	r3, [pc, #196]	; (8001178 <SystemInit+0xe8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f023 030f 	bic.w	r3, r3, #15
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <SystemInit+0xe8>)
 80010ba:	f043 0307 	orr.w	r3, r3, #7
 80010be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010c0:	4b2e      	ldr	r3, [pc, #184]	; (800117c <SystemInit+0xec>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a2d      	ldr	r2, [pc, #180]	; (800117c <SystemInit+0xec>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <SystemInit+0xec>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <SystemInit+0xec>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4929      	ldr	r1, [pc, #164]	; (800117c <SystemInit+0xec>)
 80010d8:	4b29      	ldr	r3, [pc, #164]	; (8001180 <SystemInit+0xf0>)
 80010da:	4013      	ands	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <SystemInit+0xe8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010ea:	4b23      	ldr	r3, [pc, #140]	; (8001178 <SystemInit+0xe8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 030f 	bic.w	r3, r3, #15
 80010f2:	4a21      	ldr	r2, [pc, #132]	; (8001178 <SystemInit+0xe8>)
 80010f4:	f043 0307 	orr.w	r3, r3, #7
 80010f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <SystemInit+0xec>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <SystemInit+0xec>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <SystemInit+0xec>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <SystemInit+0xec>)
 800110e:	4a1d      	ldr	r2, [pc, #116]	; (8001184 <SystemInit+0xf4>)
 8001110:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <SystemInit+0xec>)
 8001114:	4a1c      	ldr	r2, [pc, #112]	; (8001188 <SystemInit+0xf8>)
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <SystemInit+0xec>)
 800111a:	4a1c      	ldr	r2, [pc, #112]	; (800118c <SystemInit+0xfc>)
 800111c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <SystemInit+0xec>)
 8001120:	2200      	movs	r2, #0
 8001122:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <SystemInit+0xec>)
 8001126:	4a19      	ldr	r2, [pc, #100]	; (800118c <SystemInit+0xfc>)
 8001128:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <SystemInit+0xec>)
 800112c:	2200      	movs	r2, #0
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <SystemInit+0xec>)
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <SystemInit+0xfc>)
 8001134:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <SystemInit+0xec>)
 8001138:	2200      	movs	r2, #0
 800113a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <SystemInit+0xec>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0e      	ldr	r2, [pc, #56]	; (800117c <SystemInit+0xec>)
 8001142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001146:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <SystemInit+0xec>)
 800114a:	2200      	movs	r2, #0
 800114c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <SystemInit+0x100>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <SystemInit+0x104>)
 8001154:	4013      	ands	r3, r2
 8001156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800115a:	d202      	bcs.n	8001162 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <SystemInit+0x108>)
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <SystemInit+0x10c>)
 8001164:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001168:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	52002000 	.word	0x52002000
 800117c:	58024400 	.word	0x58024400
 8001180:	eaf6ed7f 	.word	0xeaf6ed7f
 8001184:	02020200 	.word	0x02020200
 8001188:	01ff0000 	.word	0x01ff0000
 800118c:	01010280 	.word	0x01010280
 8001190:	5c001000 	.word	0x5c001000
 8001194:	ffff0000 	.word	0xffff0000
 8001198:	51008108 	.word	0x51008108
 800119c:	52004000 	.word	0x52004000

080011a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011a4:	f7ff ff74 	bl	8001090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011aa:	490d      	ldr	r1, [pc, #52]	; (80011e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c0:	4c0a      	ldr	r4, [pc, #40]	; (80011ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ce:	f002 f929 	bl	8003424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d2:	f7ff fb21 	bl	8000818 <main>
  bx  lr
 80011d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011e0:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80011e4:	0800349c 	.word	0x0800349c
  ldr r2, =_sbss
 80011e8:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80011ec:	240000f4 	.word	0x240000f4

080011f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC3_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fa:	2003      	movs	r0, #3
 80011fc:	f000 f98c 	bl	8001518 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001200:	f001 fa2a 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8001204:	4602      	mov	r2, r0
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_Init+0x68>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	4913      	ldr	r1, [pc, #76]	; (8001260 <HAL_Init+0x6c>)
 8001212:	5ccb      	ldrb	r3, [r1, r3]
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
 800121c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_Init+0x68>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_Init+0x6c>)
 8001228:	5cd3      	ldrb	r3, [r2, r3]
 800122a:	f003 031f 	and.w	r3, r3, #31
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	fa22 f303 	lsr.w	r3, r2, r3
 8001234:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <HAL_Init+0x70>)
 8001236:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_Init+0x74>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800123e:	200f      	movs	r0, #15
 8001240:	f000 f814 	bl	800126c <HAL_InitTick>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e002      	b.n	8001254 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800124e:	f7ff fd71 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	58024400 	.word	0x58024400
 8001260:	08003484 	.word	0x08003484
 8001264:	24000008 	.word	0x24000008
 8001268:	24000004 	.word	0x24000004

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_InitTick+0x60>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e021      	b.n	80012c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_InitTick+0x64>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_InitTick+0x60>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f971 	bl	800157e <HAL_SYSTICK_Config>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00e      	b.n	80012c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	d80a      	bhi.n	80012c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ac:	2200      	movs	r2, #0
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f000 f93b 	bl	800152e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <HAL_InitTick+0x68>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	24000010 	.word	0x24000010
 80012d0:	24000004 	.word	0x24000004
 80012d4:	2400000c 	.word	0x2400000c

080012d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x20>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x24>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_IncTick+0x24>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	24000010 	.word	0x24000010
 80012fc:	240000f0 	.word	0x240000f0

08001300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_GetTick+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	240000f0 	.word	0x240000f0

08001318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff ffee 	bl	8001300 <HAL_GetTick>
 8001324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001330:	d005      	beq.n	800133e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_Delay+0x44>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133e:	bf00      	nop
 8001340:	f7ff ffde 	bl	8001300 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	d8f7      	bhi.n	8001340 <HAL_Delay+0x28>
  {
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	24000010 	.word	0x24000010

08001360 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_GetREVID+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0c1b      	lsrs	r3, r3, #16
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	5c001000 	.word	0x5c001000

08001378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <__NVIC_SetPriorityGrouping+0x40>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x40>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00
 80013bc:	05fa0000 	.word	0x05fa0000

080013c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db0b      	blt.n	8001406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <__NVIC_EnableIRQ+0x38>)
 80013f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e4:	d301      	bcc.n	80014ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00f      	b.n	800150a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <SysTick_Config+0x40>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f2:	210f      	movs	r1, #15
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f7ff ff8e 	bl	8001418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <SysTick_Config+0x40>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <SysTick_Config+0x40>)
 8001504:	2207      	movs	r2, #7
 8001506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	e000e010 	.word	0xe000e010

08001518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff29 	bl	8001378 <__NVIC_SetPriorityGrouping>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff40 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff90 	bl	800146c <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5f 	bl	8001418 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff33 	bl	80013dc <__NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffa4 	bl	80014d4 <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015a6:	4b89      	ldr	r3, [pc, #548]	; (80017cc <HAL_GPIO_Init+0x234>)
 80015a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015aa:	e194      	b.n	80018d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8186 	beq.w	80018d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d005      	beq.n	80015dc <HAL_GPIO_Init+0x44>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d130      	bne.n	800163e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001612:	2201      	movs	r2, #1
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	f003 0201 	and.w	r2, r3, #1
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b03      	cmp	r3, #3
 8001648:	d017      	beq.n	800167a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	2203      	movs	r2, #3
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d123      	bne.n	80016ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	08da      	lsrs	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3208      	adds	r2, #8
 800168e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	220f      	movs	r2, #15
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	08da      	lsrs	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3208      	adds	r2, #8
 80016c8:	69b9      	ldr	r1, [r7, #24]
 80016ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0203 	and.w	r2, r3, #3
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80e0 	beq.w	80018d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001710:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <HAL_GPIO_Init+0x238>)
 8001712:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001716:	4a2e      	ldr	r2, [pc, #184]	; (80017d0 <HAL_GPIO_Init+0x238>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001720:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_GPIO_Init+0x238>)
 8001722:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800172e:	4a29      	ldr	r2, [pc, #164]	; (80017d4 <HAL_GPIO_Init+0x23c>)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a20      	ldr	r2, [pc, #128]	; (80017d8 <HAL_GPIO_Init+0x240>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d052      	beq.n	8001800 <HAL_GPIO_Init+0x268>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <HAL_GPIO_Init+0x244>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d031      	beq.n	80017c6 <HAL_GPIO_Init+0x22e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <HAL_GPIO_Init+0x248>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d02b      	beq.n	80017c2 <HAL_GPIO_Init+0x22a>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <HAL_GPIO_Init+0x24c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d025      	beq.n	80017be <HAL_GPIO_Init+0x226>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a1c      	ldr	r2, [pc, #112]	; (80017e8 <HAL_GPIO_Init+0x250>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d01f      	beq.n	80017ba <HAL_GPIO_Init+0x222>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <HAL_GPIO_Init+0x254>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d019      	beq.n	80017b6 <HAL_GPIO_Init+0x21e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <HAL_GPIO_Init+0x258>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_Init+0x21a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <HAL_GPIO_Init+0x25c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00d      	beq.n	80017ae <HAL_GPIO_Init+0x216>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a18      	ldr	r2, [pc, #96]	; (80017f8 <HAL_GPIO_Init+0x260>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d007      	beq.n	80017aa <HAL_GPIO_Init+0x212>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a17      	ldr	r2, [pc, #92]	; (80017fc <HAL_GPIO_Init+0x264>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d101      	bne.n	80017a6 <HAL_GPIO_Init+0x20e>
 80017a2:	2309      	movs	r3, #9
 80017a4:	e02d      	b.n	8001802 <HAL_GPIO_Init+0x26a>
 80017a6:	230a      	movs	r3, #10
 80017a8:	e02b      	b.n	8001802 <HAL_GPIO_Init+0x26a>
 80017aa:	2308      	movs	r3, #8
 80017ac:	e029      	b.n	8001802 <HAL_GPIO_Init+0x26a>
 80017ae:	2307      	movs	r3, #7
 80017b0:	e027      	b.n	8001802 <HAL_GPIO_Init+0x26a>
 80017b2:	2306      	movs	r3, #6
 80017b4:	e025      	b.n	8001802 <HAL_GPIO_Init+0x26a>
 80017b6:	2305      	movs	r3, #5
 80017b8:	e023      	b.n	8001802 <HAL_GPIO_Init+0x26a>
 80017ba:	2304      	movs	r3, #4
 80017bc:	e021      	b.n	8001802 <HAL_GPIO_Init+0x26a>
 80017be:	2303      	movs	r3, #3
 80017c0:	e01f      	b.n	8001802 <HAL_GPIO_Init+0x26a>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e01d      	b.n	8001802 <HAL_GPIO_Init+0x26a>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e01b      	b.n	8001802 <HAL_GPIO_Init+0x26a>
 80017ca:	bf00      	nop
 80017cc:	58000080 	.word	0x58000080
 80017d0:	58024400 	.word	0x58024400
 80017d4:	58000400 	.word	0x58000400
 80017d8:	58020000 	.word	0x58020000
 80017dc:	58020400 	.word	0x58020400
 80017e0:	58020800 	.word	0x58020800
 80017e4:	58020c00 	.word	0x58020c00
 80017e8:	58021000 	.word	0x58021000
 80017ec:	58021400 	.word	0x58021400
 80017f0:	58021800 	.word	0x58021800
 80017f4:	58021c00 	.word	0x58021c00
 80017f8:	58022000 	.word	0x58022000
 80017fc:	58022400 	.word	0x58022400
 8001800:	2300      	movs	r3, #0
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	f002 0203 	and.w	r2, r2, #3
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	4093      	lsls	r3, r2
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001812:	4938      	ldr	r1, [pc, #224]	; (80018f4 <HAL_GPIO_Init+0x35c>)
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3302      	adds	r3, #2
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800184e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	3301      	adds	r3, #1
 80018d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f47f ae63 	bne.w	80015ac <HAL_GPIO_Init+0x14>
  }
}
 80018e6:	bf00      	nop
 80018e8:	bf00      	nop
 80018ea:	3724      	adds	r7, #36	; 0x24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	58000400 	.word	0x58000400

080018f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	887b      	ldrh	r3, [r7, #2]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	e001      	b.n	800191a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800191a:	7bfb      	ldrb	r3, [r7, #15]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	807b      	strh	r3, [r7, #2]
 8001934:	4613      	mov	r3, r2
 8001936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001938:	787b      	ldrb	r3, [r7, #1]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800193e:	887a      	ldrh	r2, [r7, #2]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001944:	e003      	b.n	800194e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001946:	887b      	ldrh	r3, [r7, #2]
 8001948:	041a      	lsls	r2, r3, #16
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	619a      	str	r2, [r3, #24]
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800195a:	b480      	push	{r7}
 800195c:	b085      	sub	sp, #20
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	460b      	mov	r3, r1
 8001964:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800196c:	887a      	ldrh	r2, [r7, #2]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4013      	ands	r3, r2
 8001972:	041a      	lsls	r2, r3, #16
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	43d9      	mvns	r1, r3
 8001978:	887b      	ldrh	r3, [r7, #2]
 800197a:	400b      	ands	r3, r1
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	619a      	str	r2, [r3, #24]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fa69 	bl	8000e8c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_PWREx_ConfigSupply+0x70>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d00a      	beq.n	80019ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_PWREx_ConfigSupply+0x70>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d001      	beq.n	80019ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e01f      	b.n	8001a2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e01d      	b.n	8001a2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_PWREx_ConfigSupply+0x70>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f023 0207 	bic.w	r2, r3, #7
 80019f6:	490f      	ldr	r1, [pc, #60]	; (8001a34 <HAL_PWREx_ConfigSupply+0x70>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019fe:	f7ff fc7f 	bl	8001300 <HAL_GetTick>
 8001a02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a04:	e009      	b.n	8001a1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a06:	f7ff fc7b 	bl	8001300 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a14:	d901      	bls.n	8001a1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e007      	b.n	8001a2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_PWREx_ConfigSupply+0x70>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a26:	d1ee      	bne.n	8001a06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	58024800 	.word	0x58024800

08001a38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	; 0x30
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f000 bc48 	b.w	80022dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 8088 	beq.w	8001b6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a5a:	4b99      	ldr	r3, [pc, #612]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a64:	4b96      	ldr	r3, [pc, #600]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6c:	2b10      	cmp	r3, #16
 8001a6e:	d007      	beq.n	8001a80 <HAL_RCC_OscConfig+0x48>
 8001a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a72:	2b18      	cmp	r3, #24
 8001a74:	d111      	bne.n	8001a9a <HAL_RCC_OscConfig+0x62>
 8001a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d10c      	bne.n	8001a9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	4b8f      	ldr	r3, [pc, #572]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d06d      	beq.n	8001b68 <HAL_RCC_OscConfig+0x130>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d169      	bne.n	8001b68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	f000 bc21 	b.w	80022dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x7a>
 8001aa4:	4b86      	ldr	r3, [pc, #536]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a85      	ldr	r2, [pc, #532]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	e02e      	b.n	8001b10 <HAL_RCC_OscConfig+0xd8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x9c>
 8001aba:	4b81      	ldr	r3, [pc, #516]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a80      	ldr	r2, [pc, #512]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b7e      	ldr	r3, [pc, #504]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7d      	ldr	r2, [pc, #500]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e01d      	b.n	8001b10 <HAL_RCC_OscConfig+0xd8>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0xc0>
 8001ade:	4b78      	ldr	r3, [pc, #480]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a77      	ldr	r2, [pc, #476]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a74      	ldr	r2, [pc, #464]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e00b      	b.n	8001b10 <HAL_RCC_OscConfig+0xd8>
 8001af8:	4b71      	ldr	r3, [pc, #452]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a70      	ldr	r2, [pc, #448]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b6e      	ldr	r3, [pc, #440]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a6d      	ldr	r2, [pc, #436]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d013      	beq.n	8001b40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff fbf2 	bl	8001300 <HAL_GetTick>
 8001b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff fbee 	bl	8001300 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e3d4      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b32:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0xe8>
 8001b3e:	e014      	b.n	8001b6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff fbde 	bl	8001300 <HAL_GetTick>
 8001b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff fbda 	bl	8001300 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e3c0      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b5a:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x110>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80ca 	beq.w	8001d0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b78:	4b51      	ldr	r3, [pc, #324]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b82:	4b4f      	ldr	r3, [pc, #316]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <HAL_RCC_OscConfig+0x166>
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	2b18      	cmp	r3, #24
 8001b92:	d156      	bne.n	8001c42 <HAL_RCC_OscConfig+0x20a>
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d151      	bne.n	8001c42 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9e:	4b48      	ldr	r3, [pc, #288]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d005      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x17e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e392      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bb6:	4b42      	ldr	r3, [pc, #264]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 0219 	bic.w	r2, r3, #25
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	493f      	ldr	r1, [pc, #252]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fb9a 	bl	8001300 <HAL_GetTick>
 8001bcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fb96 	bl	8001300 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e37c      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bee:	f7ff fbb7 	bl	8001360 <HAL_GetREVID>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d817      	bhi.n	8001c2c <HAL_RCC_OscConfig+0x1f4>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	2b40      	cmp	r3, #64	; 0x40
 8001c02:	d108      	bne.n	8001c16 <HAL_RCC_OscConfig+0x1de>
 8001c04:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c0c:	4a2c      	ldr	r2, [pc, #176]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c12:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c14:	e07a      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	031b      	lsls	r3, r3, #12
 8001c24:	4926      	ldr	r1, [pc, #152]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c2a:	e06f      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	061b      	lsls	r3, r3, #24
 8001c3a:	4921      	ldr	r1, [pc, #132]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c40:	e064      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d047      	beq.n	8001cda <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 0219 	bic.w	r2, r3, #25
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	491a      	ldr	r1, [pc, #104]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fb50 	bl	8001300 <HAL_GetTick>
 8001c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c64:	f7ff fb4c 	bl	8001300 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e332      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c82:	f7ff fb6d 	bl	8001360 <HAL_GetREVID>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d819      	bhi.n	8001cc4 <HAL_RCC_OscConfig+0x28c>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	2b40      	cmp	r3, #64	; 0x40
 8001c96:	d108      	bne.n	8001caa <HAL_RCC_OscConfig+0x272>
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca6:	6053      	str	r3, [r2, #4]
 8001ca8:	e030      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	031b      	lsls	r3, r3, #12
 8001cb8:	4901      	ldr	r1, [pc, #4]	; (8001cc0 <HAL_RCC_OscConfig+0x288>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	604b      	str	r3, [r1, #4]
 8001cbe:	e025      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	4b9a      	ldr	r3, [pc, #616]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	061b      	lsls	r3, r3, #24
 8001cd2:	4997      	ldr	r1, [pc, #604]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
 8001cd8:	e018      	b.n	8001d0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4b95      	ldr	r3, [pc, #596]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a94      	ldr	r2, [pc, #592]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fb0b 	bl	8001300 <HAL_GetTick>
 8001cea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cee:	f7ff fb07 	bl	8001300 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e2ed      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d00:	4b8b      	ldr	r3, [pc, #556]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80a9 	beq.w	8001e6c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1a:	4b85      	ldr	r3, [pc, #532]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d24:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d007      	beq.n	8001d40 <HAL_RCC_OscConfig+0x308>
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2b18      	cmp	r3, #24
 8001d34:	d13a      	bne.n	8001dac <HAL_RCC_OscConfig+0x374>
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d135      	bne.n	8001dac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d40:	4b7b      	ldr	r3, [pc, #492]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_OscConfig+0x320>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	2b80      	cmp	r3, #128	; 0x80
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e2c1      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d58:	f7ff fb02 	bl	8001360 <HAL_GetREVID>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d817      	bhi.n	8001d96 <HAL_RCC_OscConfig+0x35e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	d108      	bne.n	8001d80 <HAL_RCC_OscConfig+0x348>
 8001d6e:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001d76:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d7c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d7e:	e075      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d80:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	069b      	lsls	r3, r3, #26
 8001d8e:	4968      	ldr	r1, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d94:	e06a      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d96:	4b66      	ldr	r3, [pc, #408]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	061b      	lsls	r3, r3, #24
 8001da4:	4962      	ldr	r1, [pc, #392]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001daa:	e05f      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d042      	beq.n	8001e3a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001db4:	4b5e      	ldr	r3, [pc, #376]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a5d      	ldr	r2, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fa9e 	bl	8001300 <HAL_GetTick>
 8001dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fa9a 	bl	8001300 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e280      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dda:	4b55      	ldr	r3, [pc, #340]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001de6:	f7ff fabb 	bl	8001360 <HAL_GetREVID>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f241 0203 	movw	r2, #4099	; 0x1003
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d817      	bhi.n	8001e24 <HAL_RCC_OscConfig+0x3ec>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d108      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3d6>
 8001dfc:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e04:	4a4a      	ldr	r2, [pc, #296]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e0a:	6053      	str	r3, [r2, #4]
 8001e0c:	e02e      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
 8001e0e:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	069b      	lsls	r3, r3, #26
 8001e1c:	4944      	ldr	r1, [pc, #272]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
 8001e22:	e023      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	493f      	ldr	r1, [pc, #252]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60cb      	str	r3, [r1, #12]
 8001e38:	e018      	b.n	8001e6c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a3c      	ldr	r2, [pc, #240]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7ff fa5b 	bl	8001300 <HAL_GetTick>
 8001e4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e4e:	f7ff fa57 	bl	8001300 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e23d      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e60:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d036      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d019      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e84:	4a2a      	ldr	r2, [pc, #168]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff fa38 	bl	8001300 <HAL_GetTick>
 8001e90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e94:	f7ff fa34 	bl	8001300 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e21a      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x45c>
 8001eb2:	e018      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb8:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	f7ff fa1e 	bl	8001300 <HAL_GetTick>
 8001ec4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fa1a 	bl	8001300 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e200      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d039      	beq.n	8001f66 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01c      	beq.n	8001f34 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001f00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f06:	f7ff f9fb 	bl	8001300 <HAL_GetTick>
 8001f0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f0e:	f7ff f9f7 	bl	8001300 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e1dd      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_RCC_OscConfig+0x4f8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x4d6>
 8001f2c:	e01b      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
 8001f2e:	bf00      	nop
 8001f30:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f34:	4b9b      	ldr	r3, [pc, #620]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a9a      	ldr	r2, [pc, #616]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f40:	f7ff f9de 	bl	8001300 <HAL_GetTick>
 8001f44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f48:	f7ff f9da 	bl	8001300 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1c0      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f5a:	4b92      	ldr	r3, [pc, #584]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8081 	beq.w	8002076 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f74:	4b8c      	ldr	r3, [pc, #560]	; (80021a8 <HAL_RCC_OscConfig+0x770>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a8b      	ldr	r2, [pc, #556]	; (80021a8 <HAL_RCC_OscConfig+0x770>)
 8001f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f80:	f7ff f9be 	bl	8001300 <HAL_GetTick>
 8001f84:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f88:	f7ff f9ba 	bl	8001300 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1a0      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f9a:	4b83      	ldr	r3, [pc, #524]	; (80021a8 <HAL_RCC_OscConfig+0x770>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d106      	bne.n	8001fbc <HAL_RCC_OscConfig+0x584>
 8001fae:	4b7d      	ldr	r3, [pc, #500]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	4a7c      	ldr	r2, [pc, #496]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fba:	e02d      	b.n	8002018 <HAL_RCC_OscConfig+0x5e0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10c      	bne.n	8001fde <HAL_RCC_OscConfig+0x5a6>
 8001fc4:	4b77      	ldr	r3, [pc, #476]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	4a76      	ldr	r2, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd0:	4b74      	ldr	r3, [pc, #464]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4a73      	ldr	r2, [pc, #460]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fd6:	f023 0304 	bic.w	r3, r3, #4
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70
 8001fdc:	e01c      	b.n	8002018 <HAL_RCC_OscConfig+0x5e0>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x5c8>
 8001fe6:	4b6f      	ldr	r3, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4a6e      	ldr	r2, [pc, #440]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff2:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a6b      	ldr	r2, [pc, #428]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0x5e0>
 8002000:	4b68      	ldr	r3, [pc, #416]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a67      	ldr	r2, [pc, #412]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
 800200c:	4b65      	ldr	r3, [pc, #404]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a64      	ldr	r2, [pc, #400]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002012:	f023 0304 	bic.w	r3, r3, #4
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7ff f96e 	bl	8001300 <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002026:	e00a      	b.n	800203e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7ff f96a 	bl	8001300 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e14e      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800203e:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ee      	beq.n	8002028 <HAL_RCC_OscConfig+0x5f0>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7ff f958 	bl	8001300 <HAL_GetTick>
 8002050:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002052:	e00a      	b.n	800206a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7ff f954 	bl	8001300 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e138      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800206a:	4b4e      	ldr	r3, [pc, #312]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1ee      	bne.n	8002054 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 812d 	beq.w	80022da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002080:	4b48      	ldr	r3, [pc, #288]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002088:	2b18      	cmp	r3, #24
 800208a:	f000 80bd 	beq.w	8002208 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	2b02      	cmp	r3, #2
 8002094:	f040 809e 	bne.w	80021d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002098:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a41      	ldr	r2, [pc, #260]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800209e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff f92c 	bl	8001300 <HAL_GetTick>
 80020a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff f928 	bl	8001300 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e10e      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020be:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ca:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 80020cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_RCC_OscConfig+0x774>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	430a      	orrs	r2, r1
 80020de:	4931      	ldr	r1, [pc, #196]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	628b      	str	r3, [r1, #40]	; 0x28
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	3b01      	subs	r3, #1
 80020ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f2:	3b01      	subs	r3, #1
 80020f4:	025b      	lsls	r3, r3, #9
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	3b01      	subs	r3, #1
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210c:	3b01      	subs	r3, #1
 800210e:	061b      	lsls	r3, r3, #24
 8002110:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002114:	4923      	ldr	r1, [pc, #140]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002116:	4313      	orrs	r3, r2
 8002118:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002126:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800212a:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_RCC_OscConfig+0x778>)
 800212c:	4013      	ands	r3, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002132:	00d2      	lsls	r2, r2, #3
 8002134:	491b      	ldr	r1, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002136:	4313      	orrs	r3, r2
 8002138:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f023 020c 	bic.w	r2, r3, #12
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4917      	ldr	r1, [pc, #92]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002148:	4313      	orrs	r3, r2
 800214a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	f023 0202 	bic.w	r2, r3, #2
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002158:	4912      	ldr	r1, [pc, #72]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800215a:	4313      	orrs	r3, r2
 800215c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002174:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 800217c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002180:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_RCC_OscConfig+0x76c>)
 8002194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7ff f8b1 	bl	8001300 <HAL_GetTick>
 800219e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021a0:	e011      	b.n	80021c6 <HAL_RCC_OscConfig+0x78e>
 80021a2:	bf00      	nop
 80021a4:	58024400 	.word	0x58024400
 80021a8:	58024800 	.word	0x58024800
 80021ac:	fffffc0c 	.word	0xfffffc0c
 80021b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b4:	f7ff f8a4 	bl	8001300 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e08a      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <HAL_RCC_OscConfig+0x8ac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x77c>
 80021d2:	e082      	b.n	80022da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d4:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <HAL_RCC_OscConfig+0x8ac>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a42      	ldr	r2, [pc, #264]	; (80022e4 <HAL_RCC_OscConfig+0x8ac>)
 80021da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7ff f88e 	bl	8001300 <HAL_GetTick>
 80021e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff f88a 	bl	8001300 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e070      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021fa:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <HAL_RCC_OscConfig+0x8ac>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x7b0>
 8002206:	e068      	b.n	80022da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002208:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <HAL_RCC_OscConfig+0x8ac>)
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800220e:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <HAL_RCC_OscConfig+0x8ac>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2b01      	cmp	r3, #1
 800221a:	d031      	beq.n	8002280 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f003 0203 	and.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d12a      	bne.n	8002280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d122      	bne.n	8002280 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d11a      	bne.n	8002280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	0a5b      	lsrs	r3, r3, #9
 800224e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d111      	bne.n	8002280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	0c1b      	lsrs	r3, r3, #16
 8002260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d108      	bne.n	8002280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	0e1b      	lsrs	r3, r3, #24
 8002272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e02b      	b.n	80022dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002284:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <HAL_RCC_OscConfig+0x8ac>)
 8002286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002288:	08db      	lsrs	r3, r3, #3
 800228a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800228e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	429a      	cmp	r2, r3
 8002298:	d01f      	beq.n	80022da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_RCC_OscConfig+0x8ac>)
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <HAL_RCC_OscConfig+0x8ac>)
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022a6:	f7ff f82b 	bl	8001300 <HAL_GetTick>
 80022aa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80022ac:	bf00      	nop
 80022ae:	f7ff f827 	bl	8001300 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d0f9      	beq.n	80022ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_RCC_OscConfig+0x8ac>)
 80022bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022be:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <HAL_RCC_OscConfig+0x8b0>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022c6:	00d2      	lsls	r2, r2, #3
 80022c8:	4906      	ldr	r1, [pc, #24]	; (80022e4 <HAL_RCC_OscConfig+0x8ac>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_RCC_OscConfig+0x8ac>)
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_RCC_OscConfig+0x8ac>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3730      	adds	r7, #48	; 0x30
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	58024400 	.word	0x58024400
 80022e8:	ffff0007 	.word	0xffff0007

080022ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e19c      	b.n	800263a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b8a      	ldr	r3, [pc, #552]	; (800252c <HAL_RCC_ClockConfig+0x240>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d910      	bls.n	8002330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b87      	ldr	r3, [pc, #540]	; (800252c <HAL_RCC_ClockConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	4985      	ldr	r1, [pc, #532]	; (800252c <HAL_RCC_ClockConfig+0x240>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b83      	ldr	r3, [pc, #524]	; (800252c <HAL_RCC_ClockConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e184      	b.n	800263a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d010      	beq.n	800235e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	4b7b      	ldr	r3, [pc, #492]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002348:	429a      	cmp	r2, r3
 800234a:	d908      	bls.n	800235e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800234c:	4b78      	ldr	r3, [pc, #480]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	4975      	ldr	r1, [pc, #468]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 800235a:	4313      	orrs	r3, r2
 800235c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d010      	beq.n	800238c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695a      	ldr	r2, [r3, #20]
 800236e:	4b70      	ldr	r3, [pc, #448]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002376:	429a      	cmp	r2, r3
 8002378:	d908      	bls.n	800238c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800237a:	4b6d      	ldr	r3, [pc, #436]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	496a      	ldr	r1, [pc, #424]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 8002388:	4313      	orrs	r3, r2
 800238a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b00      	cmp	r3, #0
 8002396:	d010      	beq.n	80023ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699a      	ldr	r2, [r3, #24]
 800239c:	4b64      	ldr	r3, [pc, #400]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d908      	bls.n	80023ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023a8:	4b61      	ldr	r3, [pc, #388]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	495e      	ldr	r1, [pc, #376]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d010      	beq.n	80023e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69da      	ldr	r2, [r3, #28]
 80023ca:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d908      	bls.n	80023e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023d6:	4b56      	ldr	r3, [pc, #344]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	4953      	ldr	r1, [pc, #332]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d010      	beq.n	8002416 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	4b4d      	ldr	r3, [pc, #308]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	429a      	cmp	r2, r3
 8002402:	d908      	bls.n	8002416 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002404:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f023 020f 	bic.w	r2, r3, #15
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4947      	ldr	r1, [pc, #284]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 8002412:	4313      	orrs	r3, r2
 8002414:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d055      	beq.n	80024ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002422:	4b43      	ldr	r3, [pc, #268]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4940      	ldr	r1, [pc, #256]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 8002430:	4313      	orrs	r3, r2
 8002432:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d107      	bne.n	800244c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800243c:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d121      	bne.n	800248c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0f6      	b.n	800263a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d107      	bne.n	8002464 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002454:	4b36      	ldr	r3, [pc, #216]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d115      	bne.n	800248c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0ea      	b.n	800263a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d107      	bne.n	800247c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800246c:	4b30      	ldr	r3, [pc, #192]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d109      	bne.n	800248c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0de      	b.n	800263a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800247c:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0d6      	b.n	800263a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800248c:	4b28      	ldr	r3, [pc, #160]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f023 0207 	bic.w	r2, r3, #7
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	4925      	ldr	r1, [pc, #148]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 800249a:	4313      	orrs	r3, r2
 800249c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800249e:	f7fe ff2f 	bl	8001300 <HAL_GetTick>
 80024a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a6:	f7fe ff2b 	bl	8001300 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e0be      	b.n	800263a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024bc:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d1eb      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d010      	beq.n	80024fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	4b14      	ldr	r3, [pc, #80]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d208      	bcs.n	80024fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ea:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f023 020f 	bic.w	r2, r3, #15
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	490e      	ldr	r1, [pc, #56]	; (8002530 <HAL_RCC_ClockConfig+0x244>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_ClockConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d214      	bcs.n	8002534 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_RCC_ClockConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 020f 	bic.w	r2, r3, #15
 8002512:	4906      	ldr	r1, [pc, #24]	; (800252c <HAL_RCC_ClockConfig+0x240>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <HAL_RCC_ClockConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e086      	b.n	800263a <HAL_RCC_ClockConfig+0x34e>
 800252c:	52002000 	.word	0x52002000
 8002530:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d010      	beq.n	8002562 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	4b3f      	ldr	r3, [pc, #252]	; (8002644 <HAL_RCC_ClockConfig+0x358>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800254c:	429a      	cmp	r2, r3
 800254e:	d208      	bcs.n	8002562 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002550:	4b3c      	ldr	r3, [pc, #240]	; (8002644 <HAL_RCC_ClockConfig+0x358>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	4939      	ldr	r1, [pc, #228]	; (8002644 <HAL_RCC_ClockConfig+0x358>)
 800255e:	4313      	orrs	r3, r2
 8002560:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d010      	beq.n	8002590 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	4b34      	ldr	r3, [pc, #208]	; (8002644 <HAL_RCC_ClockConfig+0x358>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800257a:	429a      	cmp	r2, r3
 800257c:	d208      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800257e:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_RCC_ClockConfig+0x358>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	492e      	ldr	r1, [pc, #184]	; (8002644 <HAL_RCC_ClockConfig+0x358>)
 800258c:	4313      	orrs	r3, r2
 800258e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d010      	beq.n	80025be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	4b28      	ldr	r3, [pc, #160]	; (8002644 <HAL_RCC_ClockConfig+0x358>)
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d208      	bcs.n	80025be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_RCC_ClockConfig+0x358>)
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4922      	ldr	r1, [pc, #136]	; (8002644 <HAL_RCC_ClockConfig+0x358>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d010      	beq.n	80025ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_RCC_ClockConfig+0x358>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d208      	bcs.n	80025ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80025da:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <HAL_RCC_ClockConfig+0x358>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4917      	ldr	r1, [pc, #92]	; (8002644 <HAL_RCC_ClockConfig+0x358>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025ec:	f000 f834 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_RCC_ClockConfig+0x358>)
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	4912      	ldr	r1, [pc, #72]	; (8002648 <HAL_RCC_ClockConfig+0x35c>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
 8002608:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HAL_RCC_ClockConfig+0x358>)
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <HAL_RCC_ClockConfig+0x35c>)
 8002614:	5cd3      	ldrb	r3, [r2, r3]
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
 8002620:	4a0a      	ldr	r2, [pc, #40]	; (800264c <HAL_RCC_ClockConfig+0x360>)
 8002622:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <HAL_RCC_ClockConfig+0x364>)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <HAL_RCC_ClockConfig+0x368>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fe1c 	bl	800126c <HAL_InitTick>
 8002634:	4603      	mov	r3, r0
 8002636:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	58024400 	.word	0x58024400
 8002648:	08003484 	.word	0x08003484
 800264c:	24000008 	.word	0x24000008
 8002650:	24000004 	.word	0x24000004
 8002654:	2400000c 	.word	0x2400000c

08002658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800265e:	4bb3      	ldr	r3, [pc, #716]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002666:	2b18      	cmp	r3, #24
 8002668:	f200 8155 	bhi.w	8002916 <HAL_RCC_GetSysClockFreq+0x2be>
 800266c:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <HAL_RCC_GetSysClockFreq+0x1c>)
 800266e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002672:	bf00      	nop
 8002674:	080026d9 	.word	0x080026d9
 8002678:	08002917 	.word	0x08002917
 800267c:	08002917 	.word	0x08002917
 8002680:	08002917 	.word	0x08002917
 8002684:	08002917 	.word	0x08002917
 8002688:	08002917 	.word	0x08002917
 800268c:	08002917 	.word	0x08002917
 8002690:	08002917 	.word	0x08002917
 8002694:	080026ff 	.word	0x080026ff
 8002698:	08002917 	.word	0x08002917
 800269c:	08002917 	.word	0x08002917
 80026a0:	08002917 	.word	0x08002917
 80026a4:	08002917 	.word	0x08002917
 80026a8:	08002917 	.word	0x08002917
 80026ac:	08002917 	.word	0x08002917
 80026b0:	08002917 	.word	0x08002917
 80026b4:	08002705 	.word	0x08002705
 80026b8:	08002917 	.word	0x08002917
 80026bc:	08002917 	.word	0x08002917
 80026c0:	08002917 	.word	0x08002917
 80026c4:	08002917 	.word	0x08002917
 80026c8:	08002917 	.word	0x08002917
 80026cc:	08002917 	.word	0x08002917
 80026d0:	08002917 	.word	0x08002917
 80026d4:	0800270b 	.word	0x0800270b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026d8:	4b94      	ldr	r3, [pc, #592]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026e4:	4b91      	ldr	r3, [pc, #580]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	08db      	lsrs	r3, r3, #3
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	4a90      	ldr	r2, [pc, #576]	; (8002930 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
 80026f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80026f6:	e111      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026f8:	4b8d      	ldr	r3, [pc, #564]	; (8002930 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026fa:	61bb      	str	r3, [r7, #24]
      break;
 80026fc:	e10e      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80026fe:	4b8d      	ldr	r3, [pc, #564]	; (8002934 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002700:	61bb      	str	r3, [r7, #24]
      break;
 8002702:	e10b      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002704:	4b8c      	ldr	r3, [pc, #560]	; (8002938 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002706:	61bb      	str	r3, [r7, #24]
      break;
 8002708:	e108      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800270a:	4b88      	ldr	r3, [pc, #544]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002714:	4b85      	ldr	r3, [pc, #532]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800271e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002720:	4b82      	ldr	r3, [pc, #520]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800272a:	4b80      	ldr	r3, [pc, #512]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800272c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272e:	08db      	lsrs	r3, r3, #3
 8002730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	ee07 3a90 	vmov	s15, r3
 800273e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002742:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80e1 	beq.w	8002910 <HAL_RCC_GetSysClockFreq+0x2b8>
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b02      	cmp	r3, #2
 8002752:	f000 8083 	beq.w	800285c <HAL_RCC_GetSysClockFreq+0x204>
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b02      	cmp	r3, #2
 800275a:	f200 80a1 	bhi.w	80028a0 <HAL_RCC_GetSysClockFreq+0x248>
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x114>
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d056      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x1c0>
 800276a:	e099      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800276c:	4b6f      	ldr	r3, [pc, #444]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d02d      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002778:	4b6c      	ldr	r3, [pc, #432]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	08db      	lsrs	r3, r3, #3
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	4a6b      	ldr	r2, [pc, #428]	; (8002930 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
 8002788:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	ee07 3a90 	vmov	s15, r3
 8002790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	ee07 3a90 	vmov	s15, r3
 800279a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a2:	4b62      	ldr	r3, [pc, #392]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800293c <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80027d2:	e087      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002940 <HAL_RCC_GetSysClockFreq+0x2e8>
 80027e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e6:	4b51      	ldr	r3, [pc, #324]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800293c <HAL_RCC_GetSysClockFreq+0x2e4>
 80027fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800280a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002816:	e065      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002822:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002944 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800282a:	4b40      	ldr	r3, [pc, #256]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800283a:	ed97 6a02 	vldr	s12, [r7, #8]
 800283e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800293c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800284a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800284e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800285a:	e043      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002866:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002948 <HAL_RCC_GetSysClockFreq+0x2f0>
 800286a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800286e:	4b2f      	ldr	r3, [pc, #188]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800287e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002882:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800293c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800288a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800288e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800289e:	e021      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	ee07 3a90 	vmov	s15, r3
 80028a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002944 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028b2:	4b1e      	ldr	r3, [pc, #120]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800293c <HAL_RCC_GetSysClockFreq+0x2e4>
 80028ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	0a5b      	lsrs	r3, r3, #9
 80028ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028ee:	3301      	adds	r3, #1
 80028f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002908:	ee17 3a90 	vmov	r3, s15
 800290c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800290e:	e005      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	61bb      	str	r3, [r7, #24]
      break;
 8002914:	e002      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002918:	61bb      	str	r3, [r7, #24]
      break;
 800291a:	bf00      	nop
  }

  return sysclockfreq;
 800291c:	69bb      	ldr	r3, [r7, #24]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3724      	adds	r7, #36	; 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	58024400 	.word	0x58024400
 8002930:	03d09000 	.word	0x03d09000
 8002934:	003d0900 	.word	0x003d0900
 8002938:	00b71b00 	.word	0x00b71b00
 800293c:	46000000 	.word	0x46000000
 8002940:	4c742400 	.word	0x4c742400
 8002944:	4a742400 	.word	0x4a742400
 8002948:	4b371b00 	.word	0x4b371b00

0800294c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e049      	b.n	80029f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe f9f8 	bl	8000d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3304      	adds	r3, #4
 8002988:	4619      	mov	r1, r3
 800298a:	4610      	mov	r0, r2
 800298c:	f000 fb5e 	bl	800304c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d001      	beq.n	8002a14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e04c      	b.n	8002aae <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a26      	ldr	r2, [pc, #152]	; (8002abc <HAL_TIM_Base_Start+0xc0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d022      	beq.n	8002a6c <HAL_TIM_Base_Start+0x70>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2e:	d01d      	beq.n	8002a6c <HAL_TIM_Base_Start+0x70>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a22      	ldr	r2, [pc, #136]	; (8002ac0 <HAL_TIM_Base_Start+0xc4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d018      	beq.n	8002a6c <HAL_TIM_Base_Start+0x70>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a21      	ldr	r2, [pc, #132]	; (8002ac4 <HAL_TIM_Base_Start+0xc8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d013      	beq.n	8002a6c <HAL_TIM_Base_Start+0x70>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <HAL_TIM_Base_Start+0xcc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00e      	beq.n	8002a6c <HAL_TIM_Base_Start+0x70>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <HAL_TIM_Base_Start+0xd0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d009      	beq.n	8002a6c <HAL_TIM_Base_Start+0x70>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ad0 <HAL_TIM_Base_Start+0xd4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d004      	beq.n	8002a6c <HAL_TIM_Base_Start+0x70>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <HAL_TIM_Base_Start+0xd8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d115      	bne.n	8002a98 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <HAL_TIM_Base_Start+0xdc>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2b06      	cmp	r3, #6
 8002a7c:	d015      	beq.n	8002aaa <HAL_TIM_Base_Start+0xae>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a84:	d011      	beq.n	8002aaa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a96:	e008      	b.n	8002aaa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e000      	b.n	8002aac <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	40000c00 	.word	0x40000c00
 8002acc:	40010400 	.word	0x40010400
 8002ad0:	40001800 	.word	0x40001800
 8002ad4:	40014000 	.word	0x40014000
 8002ad8:	00010007 	.word	0x00010007

08002adc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d001      	beq.n	8002af4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e054      	b.n	8002b9e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a26      	ldr	r2, [pc, #152]	; (8002bac <HAL_TIM_Base_Start_IT+0xd0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d022      	beq.n	8002b5c <HAL_TIM_Base_Start_IT+0x80>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1e:	d01d      	beq.n	8002b5c <HAL_TIM_Base_Start_IT+0x80>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d018      	beq.n	8002b5c <HAL_TIM_Base_Start_IT+0x80>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a21      	ldr	r2, [pc, #132]	; (8002bb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d013      	beq.n	8002b5c <HAL_TIM_Base_Start_IT+0x80>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1f      	ldr	r2, [pc, #124]	; (8002bb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00e      	beq.n	8002b5c <HAL_TIM_Base_Start_IT+0x80>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <HAL_TIM_Base_Start_IT+0xe0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d009      	beq.n	8002b5c <HAL_TIM_Base_Start_IT+0x80>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <HAL_TIM_Base_Start_IT+0xe4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d004      	beq.n	8002b5c <HAL_TIM_Base_Start_IT+0x80>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1b      	ldr	r2, [pc, #108]	; (8002bc4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d115      	bne.n	8002b88 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_TIM_Base_Start_IT+0xec>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b06      	cmp	r3, #6
 8002b6c:	d015      	beq.n	8002b9a <HAL_TIM_Base_Start_IT+0xbe>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b74:	d011      	beq.n	8002b9a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b86:	e008      	b.n	8002b9a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	e000      	b.n	8002b9c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40010000 	.word	0x40010000
 8002bb0:	40000400 	.word	0x40000400
 8002bb4:	40000800 	.word	0x40000800
 8002bb8:	40000c00 	.word	0x40000c00
 8002bbc:	40010400 	.word	0x40010400
 8002bc0:	40001800 	.word	0x40001800
 8002bc4:	40014000 	.word	0x40014000
 8002bc8:	00010007 	.word	0x00010007

08002bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d122      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d11b      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0202 	mvn.w	r2, #2
 8002bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f9fe 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002c14:	e005      	b.n	8002c22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f9f0 	bl	8002ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fa01 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d122      	bne.n	8002c7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d11b      	bne.n	8002c7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0204 	mvn.w	r2, #4
 8002c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2202      	movs	r2, #2
 8002c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f9d4 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002c68:	e005      	b.n	8002c76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f9c6 	bl	8002ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f9d7 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d122      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d11b      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0208 	mvn.w	r2, #8
 8002ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f9aa 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e005      	b.n	8002cca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f99c 	bl	8002ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f9ad 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b10      	cmp	r3, #16
 8002cdc:	d122      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d11b      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0210 	mvn.w	r2, #16
 8002cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f980 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f972 	bl	8002ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f983 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d10e      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d107      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0201 	mvn.w	r2, #1
 8002d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe f910 	bl	8000f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5a:	2b80      	cmp	r3, #128	; 0x80
 8002d5c:	d10e      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d68:	2b80      	cmp	r3, #128	; 0x80
 8002d6a:	d107      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fb38 	bl	80033ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8a:	d10e      	bne.n	8002daa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	2b80      	cmp	r3, #128	; 0x80
 8002d98:	d107      	bne.n	8002daa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fb2b 	bl	8003400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d10e      	bne.n	8002dd6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b40      	cmp	r3, #64	; 0x40
 8002dc4:	d107      	bne.n	8002dd6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f931 	bl	8003038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d10e      	bne.n	8002e02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d107      	bne.n	8002e02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f06f 0220 	mvn.w	r2, #32
 8002dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 faeb 	bl	80033d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_TIM_ConfigClockSource+0x1c>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e0dc      	b.n	8002fe2 <HAL_TIM_ConfigClockSource+0x1d6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <HAL_TIM_ConfigClockSource+0x1e0>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a64      	ldr	r2, [pc, #400]	; (8002ff0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	f000 80a9 	beq.w	8002fb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002e64:	4a62      	ldr	r2, [pc, #392]	; (8002ff0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	f200 80ae 	bhi.w	8002fc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8002e6c:	4a61      	ldr	r2, [pc, #388]	; (8002ff4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	f000 80a1 	beq.w	8002fb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002e74:	4a5f      	ldr	r2, [pc, #380]	; (8002ff4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	f200 80a6 	bhi.w	8002fc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8002e7c:	4a5e      	ldr	r2, [pc, #376]	; (8002ff8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	f000 8099 	beq.w	8002fb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002e84:	4a5c      	ldr	r2, [pc, #368]	; (8002ff8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	f200 809e 	bhi.w	8002fc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8002e8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002e90:	f000 8091 	beq.w	8002fb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002e94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002e98:	f200 8096 	bhi.w	8002fc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8002e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ea0:	f000 8089 	beq.w	8002fb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ea8:	f200 808e 	bhi.w	8002fc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8002eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb0:	d03e      	beq.n	8002f30 <HAL_TIM_ConfigClockSource+0x124>
 8002eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb6:	f200 8087 	bhi.w	8002fc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8002eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ebe:	f000 8086 	beq.w	8002fce <HAL_TIM_ConfigClockSource+0x1c2>
 8002ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec6:	d87f      	bhi.n	8002fc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8002ec8:	2b70      	cmp	r3, #112	; 0x70
 8002eca:	d01a      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0xf6>
 8002ecc:	2b70      	cmp	r3, #112	; 0x70
 8002ece:	d87b      	bhi.n	8002fc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8002ed0:	2b60      	cmp	r3, #96	; 0x60
 8002ed2:	d050      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x16a>
 8002ed4:	2b60      	cmp	r3, #96	; 0x60
 8002ed6:	d877      	bhi.n	8002fc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8002ed8:	2b50      	cmp	r3, #80	; 0x50
 8002eda:	d03c      	beq.n	8002f56 <HAL_TIM_ConfigClockSource+0x14a>
 8002edc:	2b50      	cmp	r3, #80	; 0x50
 8002ede:	d873      	bhi.n	8002fc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8002ee0:	2b40      	cmp	r3, #64	; 0x40
 8002ee2:	d058      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0x18a>
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d86f      	bhi.n	8002fc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8002ee8:	2b30      	cmp	r3, #48	; 0x30
 8002eea:	d064      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002eec:	2b30      	cmp	r3, #48	; 0x30
 8002eee:	d86b      	bhi.n	8002fc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d060      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d867      	bhi.n	8002fc8 <HAL_TIM_ConfigClockSource+0x1bc>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d05c      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002efc:	2b10      	cmp	r3, #16
 8002efe:	d05a      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8002f00:	e062      	b.n	8002fc8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f12:	f000 f9b3 	bl	800327c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	609a      	str	r2, [r3, #8]
      break;
 8002f2e:	e04f      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f40:	f000 f99c 	bl	800327c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f52:	609a      	str	r2, [r3, #8]
      break;
 8002f54:	e03c      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f62:	461a      	mov	r2, r3
 8002f64:	f000 f90c 	bl	8003180 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2150      	movs	r1, #80	; 0x50
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f966 	bl	8003240 <TIM_ITRx_SetConfig>
      break;
 8002f74:	e02c      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f82:	461a      	mov	r2, r3
 8002f84:	f000 f92b 	bl	80031de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2160      	movs	r1, #96	; 0x60
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f956 	bl	8003240 <TIM_ITRx_SetConfig>
      break;
 8002f94:	e01c      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f000 f8ec 	bl	8003180 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2140      	movs	r1, #64	; 0x40
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f946 	bl	8003240 <TIM_ITRx_SetConfig>
      break;
 8002fb4:	e00c      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	f000 f93d 	bl	8003240 <TIM_ITRx_SetConfig>
      break;
 8002fc6:	e003      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
      break;
 8002fcc:	e000      	b.n	8002fd0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8002fce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	ffceff88 	.word	0xffceff88
 8002ff0:	00100040 	.word	0x00100040
 8002ff4:	00100030 	.word	0x00100030
 8002ff8:	00100020 	.word	0x00100020

08002ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a40      	ldr	r2, [pc, #256]	; (8003160 <TIM_Base_SetConfig+0x114>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d013      	beq.n	800308c <TIM_Base_SetConfig+0x40>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306a:	d00f      	beq.n	800308c <TIM_Base_SetConfig+0x40>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a3d      	ldr	r2, [pc, #244]	; (8003164 <TIM_Base_SetConfig+0x118>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00b      	beq.n	800308c <TIM_Base_SetConfig+0x40>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a3c      	ldr	r2, [pc, #240]	; (8003168 <TIM_Base_SetConfig+0x11c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d007      	beq.n	800308c <TIM_Base_SetConfig+0x40>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a3b      	ldr	r2, [pc, #236]	; (800316c <TIM_Base_SetConfig+0x120>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d003      	beq.n	800308c <TIM_Base_SetConfig+0x40>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a3a      	ldr	r2, [pc, #232]	; (8003170 <TIM_Base_SetConfig+0x124>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d108      	bne.n	800309e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a2f      	ldr	r2, [pc, #188]	; (8003160 <TIM_Base_SetConfig+0x114>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01f      	beq.n	80030e6 <TIM_Base_SetConfig+0x9a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ac:	d01b      	beq.n	80030e6 <TIM_Base_SetConfig+0x9a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a2c      	ldr	r2, [pc, #176]	; (8003164 <TIM_Base_SetConfig+0x118>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d017      	beq.n	80030e6 <TIM_Base_SetConfig+0x9a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a2b      	ldr	r2, [pc, #172]	; (8003168 <TIM_Base_SetConfig+0x11c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <TIM_Base_SetConfig+0x9a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a2a      	ldr	r2, [pc, #168]	; (800316c <TIM_Base_SetConfig+0x120>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00f      	beq.n	80030e6 <TIM_Base_SetConfig+0x9a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a29      	ldr	r2, [pc, #164]	; (8003170 <TIM_Base_SetConfig+0x124>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00b      	beq.n	80030e6 <TIM_Base_SetConfig+0x9a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a28      	ldr	r2, [pc, #160]	; (8003174 <TIM_Base_SetConfig+0x128>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d007      	beq.n	80030e6 <TIM_Base_SetConfig+0x9a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a27      	ldr	r2, [pc, #156]	; (8003178 <TIM_Base_SetConfig+0x12c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d003      	beq.n	80030e6 <TIM_Base_SetConfig+0x9a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a26      	ldr	r2, [pc, #152]	; (800317c <TIM_Base_SetConfig+0x130>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d108      	bne.n	80030f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a10      	ldr	r2, [pc, #64]	; (8003160 <TIM_Base_SetConfig+0x114>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00f      	beq.n	8003144 <TIM_Base_SetConfig+0xf8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <TIM_Base_SetConfig+0x124>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00b      	beq.n	8003144 <TIM_Base_SetConfig+0xf8>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a11      	ldr	r2, [pc, #68]	; (8003174 <TIM_Base_SetConfig+0x128>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d007      	beq.n	8003144 <TIM_Base_SetConfig+0xf8>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a10      	ldr	r2, [pc, #64]	; (8003178 <TIM_Base_SetConfig+0x12c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <TIM_Base_SetConfig+0xf8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a0f      	ldr	r2, [pc, #60]	; (800317c <TIM_Base_SetConfig+0x130>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d103      	bne.n	800314c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	615a      	str	r2, [r3, #20]
}
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40010000 	.word	0x40010000
 8003164:	40000400 	.word	0x40000400
 8003168:	40000800 	.word	0x40000800
 800316c:	40000c00 	.word	0x40000c00
 8003170:	40010400 	.word	0x40010400
 8003174:	40014000 	.word	0x40014000
 8003178:	40014400 	.word	0x40014400
 800317c:	40014800 	.word	0x40014800

08003180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f023 0201 	bic.w	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f023 030a 	bic.w	r3, r3, #10
 80031bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	621a      	str	r2, [r3, #32]
}
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031de:	b480      	push	{r7}
 80031e0:	b087      	sub	sp, #28
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f023 0210 	bic.w	r2, r3, #16
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	031b      	lsls	r3, r3, #12
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800321a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	621a      	str	r2, [r3, #32]
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4b09      	ldr	r3, [pc, #36]	; (8003278 <TIM_ITRx_SetConfig+0x38>)
 8003254:	4013      	ands	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	f043 0307 	orr.w	r3, r3, #7
 8003262:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	609a      	str	r2, [r3, #8]
}
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	ffcfff8f 	.word	0xffcfff8f

0800327c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	021a      	lsls	r2, r3, #8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	431a      	orrs	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	609a      	str	r2, [r3, #8]
}
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e06d      	b.n	80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a30      	ldr	r2, [pc, #192]	; (80033bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2f      	ldr	r2, [pc, #188]	; (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d108      	bne.n	800331a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800330e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003320:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a20      	ldr	r2, [pc, #128]	; (80033bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d022      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003346:	d01d      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d018      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d013      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1a      	ldr	r2, [pc, #104]	; (80033cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00e      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d009      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d10c      	bne.n	800339e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800338a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	4313      	orrs	r3, r2
 8003394:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40010400 	.word	0x40010400
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800
 80033cc:	40000c00 	.word	0x40000c00
 80033d0:	40001800 	.word	0x40001800
 80033d4:	40014000 	.word	0x40014000

080033d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <memset>:
 8003414:	4402      	add	r2, r0
 8003416:	4603      	mov	r3, r0
 8003418:	4293      	cmp	r3, r2
 800341a:	d100      	bne.n	800341e <memset+0xa>
 800341c:	4770      	bx	lr
 800341e:	f803 1b01 	strb.w	r1, [r3], #1
 8003422:	e7f9      	b.n	8003418 <memset+0x4>

08003424 <__libc_init_array>:
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	4d0d      	ldr	r5, [pc, #52]	; (800345c <__libc_init_array+0x38>)
 8003428:	4c0d      	ldr	r4, [pc, #52]	; (8003460 <__libc_init_array+0x3c>)
 800342a:	1b64      	subs	r4, r4, r5
 800342c:	10a4      	asrs	r4, r4, #2
 800342e:	2600      	movs	r6, #0
 8003430:	42a6      	cmp	r6, r4
 8003432:	d109      	bne.n	8003448 <__libc_init_array+0x24>
 8003434:	4d0b      	ldr	r5, [pc, #44]	; (8003464 <__libc_init_array+0x40>)
 8003436:	4c0c      	ldr	r4, [pc, #48]	; (8003468 <__libc_init_array+0x44>)
 8003438:	f000 f818 	bl	800346c <_init>
 800343c:	1b64      	subs	r4, r4, r5
 800343e:	10a4      	asrs	r4, r4, #2
 8003440:	2600      	movs	r6, #0
 8003442:	42a6      	cmp	r6, r4
 8003444:	d105      	bne.n	8003452 <__libc_init_array+0x2e>
 8003446:	bd70      	pop	{r4, r5, r6, pc}
 8003448:	f855 3b04 	ldr.w	r3, [r5], #4
 800344c:	4798      	blx	r3
 800344e:	3601      	adds	r6, #1
 8003450:	e7ee      	b.n	8003430 <__libc_init_array+0xc>
 8003452:	f855 3b04 	ldr.w	r3, [r5], #4
 8003456:	4798      	blx	r3
 8003458:	3601      	adds	r6, #1
 800345a:	e7f2      	b.n	8003442 <__libc_init_array+0x1e>
 800345c:	08003494 	.word	0x08003494
 8003460:	08003494 	.word	0x08003494
 8003464:	08003494 	.word	0x08003494
 8003468:	08003498 	.word	0x08003498

0800346c <_init>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	bf00      	nop
 8003470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003472:	bc08      	pop	{r3}
 8003474:	469e      	mov	lr, r3
 8003476:	4770      	bx	lr

08003478 <_fini>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	bf00      	nop
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr
