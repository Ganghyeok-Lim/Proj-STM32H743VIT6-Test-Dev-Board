/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    stm32h7xx_it.c
  * @brief   Interrupt Service Routines.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32h7xx_it.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */

/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define KEYPAD_ROW1		1
#define KEYPAD_ROW2		2
#define KEYPAD_ROW3		3
#define KEYPAD_ROW4		4

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
FLAG keypad_row_scan_flag = CLEAR;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim6;
/* USER CODE BEGIN EV */

/* USER CODE END EV */

/******************************************************************************/
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
}

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32H7xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCU_TACT_SW1_Pin);
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCU_TACT_SW2_Pin);
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCU_KEYPAD_COL1_Pin);
  HAL_GPIO_EXTI_IRQHandler(MCU_KEYPAD_COL2_Pin);
  HAL_GPIO_EXTI_IRQHandler(MCU_KEYPAD_COL3_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == MCU_TACT_SW1_Pin)
	{
		HAL_GPIO_TogglePin(MCU_LED1_RED_GPIO_Port, MCU_LED1_RED_Pin);
		HAL_GPIO_TogglePin(MCU_LED1_GREEN_GPIO_Port, MCU_LED1_GREEN_Pin);
	}
	else if(GPIO_Pin == MCU_TACT_SW2_Pin)
	{
		HAL_GPIO_TogglePin(MCU_LED2_RED_GPIO_Port, MCU_LED2_RED_Pin);
		HAL_GPIO_TogglePin(MCU_LED2_GREEN_GPIO_Port, MCU_LED2_GREEN_Pin);
	}

	if(GPIO_Pin == MCU_KEYPAD_COL1_Pin)
	{
		HAL_GPIO_TogglePin(MCU_LED1_GREEN_GPIO_Port, MCU_LED1_GREEN_Pin);
	}
	else if(GPIO_Pin == MCU_KEYPAD_COL2_Pin)
	{

	}
	else if(GPIO_Pin == MCU_KEYPAD_COL3_Pin)
	{

	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM6)
	{
		// it is called every 10ms

//		HAL_GPIO_TogglePin(MCU_LED1_GREEN_GPIO_Port, MCU_LED1_GREEN_Pin);
		static uint8_t keypad_row_num = 1;

		if(keypad_row_scan_enable == ENABLE)

		switch(keypad_row_num)
		{
			case KEYPAD_ROW1 :
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW1_GPIO_Port, MCU_KEYPAD_ROW1_Pin, LOW);
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW2_GPIO_Port, MCU_KEYPAD_ROW2_Pin, HIGH);
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW3_GPIO_Port, MCU_KEYPAD_ROW3_Pin, HIGH);
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW4_GPIO_Port, MCU_KEYPAD_ROW4_Pin, HIGH);

				keypad_row_num++;
				break;

			case KEYPAD_ROW2 :
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW1_GPIO_Port, MCU_KEYPAD_ROW1_Pin, HIGH);
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW2_GPIO_Port, MCU_KEYPAD_ROW2_Pin, LOW);
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW3_GPIO_Port, MCU_KEYPAD_ROW3_Pin, HIGH);
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW4_GPIO_Port, MCU_KEYPAD_ROW4_Pin, HIGH);

				keypad_row_num++;
				break;

			case KEYPAD_ROW3 :
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW1_GPIO_Port, MCU_KEYPAD_ROW1_Pin, HIGH);
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW2_GPIO_Port, MCU_KEYPAD_ROW2_Pin, HIGH);
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW3_GPIO_Port, MCU_KEYPAD_ROW3_Pin, LOW);
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW4_GPIO_Port, MCU_KEYPAD_ROW4_Pin, HIGH);

				keypad_row_num++;
				break;

			case KEYPAD_ROW4 :
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW1_GPIO_Port, MCU_KEYPAD_ROW1_Pin, HIGH);
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW2_GPIO_Port, MCU_KEYPAD_ROW2_Pin, HIGH);
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW3_GPIO_Port, MCU_KEYPAD_ROW3_Pin, HIGH);
				HAL_GPIO_WritePin(MCU_KEYPAD_ROW4_GPIO_Port, MCU_KEYPAD_ROW4_Pin, LOW);

				keypad_row_num = 1;
				break;

			default :
				break;
		}


	}
}

/* USER CODE END 1 */
